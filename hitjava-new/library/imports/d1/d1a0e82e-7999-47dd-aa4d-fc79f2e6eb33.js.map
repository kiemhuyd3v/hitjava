{"version":3,"sources":["assets\\Poker\\PokerScript\\Poker.Controller.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\nimport Configs from \"../../Loading/src/Configs\";\nimport cmd from \"./Poker.Cmd\";\n\nimport PokerNetworkClient from \"./Poker.NetworkClient\";\nimport CardUtils from \"./Poker.CardUtil\";\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\nimport BroadcastReceiver from \"../../Lobby/LobbyScript/Script/common/BroadcastReceiver\";\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\nimport InPacket from \"../../Lobby/LobbyScript/Script/networks/Network.InPacket\";\nimport cmdNetwork from \"../../Lobby/LobbyScript/Script/networks/Network.Cmd\";\n\nvar configPlayer = [  // 9 Players\n    // {\n    //     seatId: 0,\n    //     playerId: -1,\n    //     playerPos: -1,\n    //     isViewer: true\n    // }\n];\n\n// defaultPlayerPos[0 -> 8][0] = player_pos of me\nlet defaultPlayerPos = [ // 9 players\n    [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    [1, 2, 3, 4, 5, 6, 7, 8, 0],\n    [2, 3, 4, 5, 6, 7, 8, 0, 1],\n    [3, 4, 5, 6, 7, 8, 0, 1, 2],\n    [4, 5, 6, 7, 8, 0, 1, 2, 3],\n    [5, 6, 7, 8, 0, 1, 2, 3, 4],\n    [6, 7, 8, 0, 1, 2, 3, 4, 5],\n    [7, 8, 0, 1, 2, 3, 4, 5, 6],\n    [8, 0, 1, 2, 3, 4, 5, 6, 7],\n]\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class PokerController extends cc.Component {\n\n    public static instance: PokerController = null;\n\n    // UI Rooms\n    @property(cc.Node)\n    UI_ChooseRoom: cc.Node = null;\n    @property(cc.Label)\n    labelNickName: cc.Label = null;\n    @property(cc.Label)\n    labelCoin: cc.Label = null;\n    @property(cc.Node)\n    contentListRooms: cc.Node = null;\n    @property(cc.Prefab)\n    prefabItemRoom: cc.Prefab = null;\n    @property(cc.ScrollView)\n    scrollListRoom: cc.ScrollView = null;\n    @property(cc.EditBox)\n    edtFindRoom: cc.EditBox = null;\n    @property(cc.Toggle)\n    btnHideRoomFull: cc.Toggle = null;\n\n    public isInitedUIRoom = false;\n\n    // UI Playing\n    @property(cc.Node)\n    UI_Playing: cc.Node = null;\n    @property(cc.Node)\n    meCards: cc.Node = null;\n    @property(cc.Node)\n    groupPlayers: cc.Node = null;\n    @property(cc.SpriteFrame)\n    spriteCards: cc.SpriteFrame[] = [];\n    @property(cc.SpriteFrame)\n    spriteCardBack: cc.SpriteFrame = null;\n    @property(cc.Node)\n    matchPot: cc.Node = null;\n    @property(cc.Label)\n    labelMatchPot: cc.Label = null;\n    @property(cc.Node)\n    cardsDeal: cc.Node = null;\n    @property(cc.Node)\n    cardsCenter: cc.Node = null;\n    @property(cc.Node)\n    btnBet: cc.Node = null;\n    @property(cc.Node)\n    btnOpenCard: cc.Node = null;\n    @property(cc.Button)\n    btnLeaveRoom: cc.Button = null;\n    @property(cc.Node)\n    hubChips: cc.Node = null;\n    @property(cc.Label)\n    labelRoomId: cc.Label = null;\n    @property(cc.Label)\n    labelRoomBet: cc.Label = null;\n    @property(cc.Node)\n    actionBetting: cc.Node = null;\n    @property(cc.Node)\n    betChooseValue: cc.Node = null;\n    @property(cc.Node)\n    betChooseValueTarget: cc.Node = null;\n    @property(sp.Skeleton)\n    FxDealer: sp.Skeleton = null;\n    @property(cc.Node)\n    btnActions: cc.Node = null;\n\n    @property(cc.Node)\n    popupBuyIn: cc.Node = null;\n    @property(cc.Label)\n    labelBuyInMin: cc.Label = null;\n    @property(cc.Label)\n    labelBuyInMax: cc.Label = null;\n    @property(cc.EditBox)\n    edtBuyIn: cc.EditBox = null;\n    @property(cc.Toggle)\n    toggleAutoBuyIn: cc.Toggle = null;\n\n    @property(cc.Node)\n    FxMeCardName: cc.Node = null;\n    @property([cc.SpriteFrame])\n    spriteCardNames: cc.SpriteFrame[] = [];\n\n    // Notify\n    @property(cc.Node)\n    notifyTimeStart: cc.Node = null;\n    @property(cc.Node)\n    notifyTimeEnd: cc.Node = null;\n    @property(cc.Node)\n    notifyTimeBet: cc.Node = null;\n\n    // UI Chat\n    @property(cc.Node)\n    UI_Chat: cc.Node = null;\n    @property(cc.EditBox)\n    edtChatInput: cc.EditBox = null;\n\n    // Popup\n    @property(cc.Node)\n    popupNodity: cc.Node = null;\n    @property(cc.Label)\n    labelNotifyContent: cc.Label = null;\n    @property(cc.Node)\n    popupGuide: cc.Node = null;\n\n    private seatOwner = null;\n    private currentRoomBet = null;\n\n    private gameState = null;\n\n    private minutes = null;\n    private seconds = null;\n\n\n    private timeAutoStart = null;\n    private timeEnd = null;\n    private timeBet = null;\n    private timeThinking = null;\n    private intervalWaitting = null;\n    private intervalEnd = null;\n    private intervalBetting = null;\n    private intervalThinking = null;\n\n    private currentCard = null;\n    private currentCenterCard = null;\n    private numCardOpened = 0;\n\n    // bet\n    private arrBetValue = [];\n    private arrBetPos = [-170, -85, 0, 85, 170];\n    private currentBetSelectedIndex = 0;\n\n    private currentMatchPotValue = 0;\n    private timeoutChiaBaiDone = null;\n\n    private minCashIn = null;\n    private maxCashIn = null;\n\n    private currentMaxBet = 0;\n    private currentRaiseMin = 0;\n    private currentRaiseValue = 0;\n    private currentRaiseStep = 0;\n    private currentMeBet = 0;\n    private lastMeBet = 0;\n\n    private currentPrivateCardList = [];\n\n    private roomMinBuyIn = 0;\n    private roomMaxBuyIn = 0;\n\n    private isFolded = false;\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        PokerController.instance = this;\n\n        this.seatOwner = -1;\n\n        this.initConfigPlayer();\n    }\n\n    start() {\n        this.showUIRooms();\n\n        App.instance.showErrLoading(\"Đang kết nối tới server...\");\n        PokerNetworkClient.getInstance().addOnOpen(() => {\n            App.instance.showErrLoading(\"Đang đang đăng nhập...\");\n            PokerNetworkClient.getInstance().send(new cmdNetwork.SendLogin(Configs.Login.Nickname, Configs.Login.AccessToken));\n        }, this);\n        PokerNetworkClient.getInstance().addOnClose(() => {\n            App.instance.loadScene(\"Lobby\");\n        }, this);\n        PokerNetworkClient.getInstance().connect();\n    }\n\n    // Request UI Room\n    joinRoom(info) {\n        //  cc.log(\"Poker joinRoom roomInfo : \", info);\n        App.instance.showLoading(true);\n        PokerNetworkClient.getInstance().send(new cmd.SendJoinRoomById(info[\"id\"]));\n    }\n\n    refeshListRoom() {\n        this.contentListRooms.removeAllChildren(true);\n        PokerNetworkClient.getInstance().send(new cmd.SendGetListRoom());\n    }\n\n    findRoomId() {\n        //  cc.log(\"Poker findRoomId id : \", this.edtFindRoom.string);\n        let text = this.edtFindRoom.string.trim();\n        if (text.length > 0) {\n            let idFind = parseInt(text);\n            for (let index = 0; index < this.contentListRooms.childrenCount; index++) {\n                let roomItem = this.contentListRooms.children[index].getComponent(\"Poker.ItemRoom\");\n                if (roomItem.roomInfo[\"id\"] != idFind) {\n                    this.contentListRooms.children[index].active = false;\n                }\n            }\n        } else {\n            for (let index = 0; index < this.contentListRooms.childrenCount; index++) {\n                this.contentListRooms.children[index].active = true;\n            }\n        }\n    }\n\n    hideRoomFull() {\n        if (this.btnHideRoomFull.isChecked) {\n            for (let index = 0; index < this.contentListRooms.childrenCount; index++) {\n                let roomItem = this.contentListRooms.children[index].getComponent(\"Poker.ItemRoom\");\n                if (roomItem.roomInfo[\"userCount\"] == roomItem.roomInfo[\"maxUserPerRoom\"]) {\n                    this.contentListRooms.children[index].active = false;\n                }\n            }\n        } else {\n            for (let index = 0; index < this.contentListRooms.childrenCount; index++) {\n                this.contentListRooms.children[index].active = true;\n            }\n        }\n    }\n\n    showUIRooms() {\n        this.UI_ChooseRoom.active = true;\n        if (this.isInitedUIRoom) {\n            BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\n        } else {\n            this.isInitedUIRoom = true;\n            this.labelNickName.string = Configs.Login.Nickname;\n            BroadcastReceiver.register(BroadcastReceiver.USER_UPDATE_COIN, () => {\n                this.labelCoin.string = Utils.formatNumber(Configs.Login.Coin);\n            }, this);\n            BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\n\n            this.setupListener();\n        }\n    }\n\n    closeUIRoom() {\n        this.UI_ChooseRoom.active = false;\n    }\n\n    createRoom() {\n        //  cc.log(\"Poker createRoom\");\n    }\n\n    playingNow() {\n        //  cc.log(\"Poker playingNow\");\n        let arrRoomOkMoney = [];\n        for (let index = 0; index < this.contentListRooms.childrenCount; index++) {\n            let roomItem = this.contentListRooms.children[index].getComponent(\"Poker.ItemRoom\");\n            if (roomItem.roomInfo[\"requiredMoney\"] < Configs.Login.Coin) {\n                arrRoomOkMoney.push(index);\n            }\n        }\n\n        //  cc.log(\"Poker playingNow arrRoomOkMoney : \", arrRoomOkMoney);\n\n        if (arrRoomOkMoney.length > 0) {\n            let roomCrowed = arrRoomOkMoney[0];\n            //  cc.log(\"Poker playingNow roomCrowed start : \", roomCrowed);\n            for (let index = 0; index < arrRoomOkMoney.length; index++) {\n                let roomItem = this.contentListRooms.children[arrRoomOkMoney[index]].getComponent(\"Poker.ItemRoom\");\n                let roomItemCrowed = this.contentListRooms.children[roomCrowed].getComponent(\"Poker.ItemRoom\");\n                //  cc.log(\"Poker playingNow ------------------------------------------\");\n                //  cc.log(\"Poker playingNow roomItem : \", roomItem.roomInfo[\"userCount\"]);\n                //  cc.log(\"Poker playingNow roomItemCrowed : \", roomItemCrowed.roomInfo[\"userCount\"]);\n                if (roomItem.roomInfo[\"userCount\"] > roomItemCrowed.roomInfo[\"userCount\"]) {\n                    roomCrowed = arrRoomOkMoney[index];\n                    //  cc.log(\"Poker playingNow roomCrowed update : \", roomCrowed);\n                }\n            }\n            //  cc.log(\"Poker playingNow roomCrowed end : \", roomCrowed);\n            let roomChoosed = this.contentListRooms.children[roomCrowed].getComponent(\"Poker.ItemRoom\");\n            //  cc.log(\"Poker playingNow roomCrowed end roomInfo : \", roomChoosed.roomInfo);\n            this.joinRoom(roomChoosed.roomInfo);\n        } else {\n            App.instance.alertDialog.showMsg(\"Không đủ tiền tham gia\\nbất kỳ phòng nào !\");\n        }\n    }\n\n    // Chat\n    showUIChat() {\n        this.UI_Chat.active = true;\n        this.UI_Chat.x = 1000;\n        this.UI_Chat.stopAllActions();\n        this.UI_Chat.runAction(\n            cc.moveTo(0.25, 546, 0)\n        );\n    }\n\n    closeUIChat() {\n        this.UI_Chat.runAction(\n            cc.moveTo(0.25, 1000, 0)\n        );\n    }\n\n    chatEmotion(event, id) {\n        //  cc.log(\"Poker chatEmotion id : \", id);\n        PokerNetworkClient.getInstance().send(new cmd.SendChatRoom(1, id));\n        this.closeUIChat();\n    }\n\n    chatMsg() {\n        if (this.edtChatInput.string.trim().length > 0) {\n            PokerNetworkClient.getInstance().send(new cmd.SendChatRoom(0, this.edtChatInput.string));\n            this.edtChatInput.string = \"\";\n            this.closeUIChat();\n        }\n    }\n\n    showPopupGuide() {\n        this.popupGuide.active = true;\n    }\n\n    closePopupGuide() {\n        this.popupGuide.active = false;\n    }\n\n    backToLobby() {\n        PokerNetworkClient.getInstance().close();\n        App.instance.loadScene(\"Lobby\");\n    }\n\n    // Playing\n    showUIPlaying() {\n        this.UI_Playing.active = true;\n        this.FxDealer.setAnimation(0, \"cho\", true);\n    }\n\n    closeUIPlaying() {\n        this.actionLeaveRoom();\n    }\n\n    setupMatch(data: cmd.ReceivedJoinRoomSucceed) {\n        this.showUIPlaying();\n        this.closeUIChat();\n        //  cc.log(\"Poker setupMatch data : \", data);\n\n        // {\n        //     \"myChair\": 0,\n        //     \"moneyBet\": 128000,\n        //     \"roomOwner\": 0,\n        //     \"roomId\": 23808,\n        //     \"gameId\": 100609,\n        //     \"moneyType\": 0,\n        //     \"rule\": 0,\n        //     \"playerSize\": 0,\n        //     \"playerStatus\": [],\n        //     \"playerInfos\": [],\n        //     \"handCardSizeSize\": 0,\n        //     \"handCardSizeList\": [],\n        //     \"minBuyInTiLe\": 0,\n        //     \"maxBuyInTiLe\": 0\n        //   }\n\n        let myChair = data[\"myChair\"];\n        let moneyBet = data[\"moneyBet\"];\n        let roomOwner = data[\"roomOwner\"];\n        let roomId = data[\"roomId\"];\n        let gameId = data[\"gameId\"];\n        let moneyType = data[\"moneyType\"];\n        let rule = data[\"rule\"];\n        let playerSize = data[\"playerSize\"];\n        let playerStatus = data[\"playerStatus\"];\n        let playerInfos = data[\"playerInfos\"];\n        let handCardSizeSize = data[\"handCardSizeSize\"];\n        let handCardSizeList = data[\"handCardSizeList\"];\n        let minBuyInTiLe = data[\"minBuyInTiLe\"];\n        let maxBuyInTiLe = data[\"maxBuyInTiLe\"]\n\n        //  cc.log(\"Poker setupMatch myChair  : \", myChair);\n        //  cc.log(\"Poker setupMatch moneyBet  : \", moneyBet);\n        //  cc.log(\"Poker setupMatch roomOwner  : \", roomOwner);\n        //  cc.log(\"Poker setupMatch roomId  : \", roomId);\n        //  cc.log(\"Poker setupMatch gameId  : \", gameId);\n        //  cc.log(\"Poker setupMatch moneyType  : \", moneyType);\n        //  cc.log(\"Poker setupMatch rule  : \", rule);\n        //  cc.log(\"Poker setupMatch playerSize  : \", playerSize);\n        //  cc.log(\"Poker setupMatch playerStatus  : \", playerStatus);\n        //  cc.log(\"Poker setupMatch playerInfos  : \", playerInfos);\n        //  cc.log(\"Poker setupMatch handCardSizeSize  : \", handCardSizeSize);\n        //  cc.log(\"Poker setupMatch handCardSizeList  : \", handCardSizeList);\n        //  cc.log(\"Poker setupMatch minBuyInTiLe  : \", minBuyInTiLe);\n        //  cc.log(\"Poker setupMatch maxBuyInTiLe  : \", maxBuyInTiLe);\n\n        // Kiem tra, chon 1 thoi\n        this.gameState = cmd.Code.STATE_JOIN_ROOM;\n\n        this.roomMinBuyIn = minBuyInTiLe;\n        this.roomMaxBuyIn = maxBuyInTiLe;\n\n        this.labelRoomId.string = \"POKER - PHÒNG: \" + roomId;\n        this.labelRoomBet.string = \"MỨC CƯỢC: \" + Utils.formatNumber(moneyBet) + \"/\" + Utils.formatNumber(2 * moneyBet) + \"$\";\n        this.currentRoomBet = moneyBet;\n\n        this.resetCenterCards();\n\n        configPlayer[0].playerId = Configs.Login.Nickname;\n        configPlayer[0].playerPos = myChair;\n        //  cc.log(\"Poker setupMatch configPlayer Me : \", configPlayer[0]);\n        //  cc.log(\"Poker setupMatch configPlayer  : \", configPlayer);\n\n        var numPlayers = 0;\n        var arrPlayerPosExist = [];\n        var arrPlayerInfo = [];\n        var arrPlayerStatus = [];\n\n        for (let index = 0; index < cmd.Code.MAX_PLAYER; index++) {\n            if (playerInfos[index].nickName !== \"\") {\n                numPlayers += 1;\n                arrPlayerPosExist.push(index);\n                arrPlayerInfo.push(playerInfos[index]);\n                arrPlayerStatus.push(playerStatus[index]);\n            }\n        }\n        //  cc.log(\"Poker setupMatch numPlayers : \", numPlayers);\n        //  cc.log(\"Poker setupMatch arrPlayerStatus : \", arrPlayerStatus);\n        //  cc.log(\"Poker setupMatch arrPlayerInfo : \", arrPlayerInfo);\n        //  cc.log(\"Poker setupMatch arrPlayerPosExist : \", arrPlayerPosExist);\n\n        this.resetHubChips();\n        this.FxMeCardName.active = false;\n        this.FxDealer.setAnimation(0, \"cho\", true);\n\n        // setup configPlayer\n        for (let a = 0; a < configPlayer.length; a++) {\n            configPlayer[a].playerPos = defaultPlayerPos[myChair][a];\n        }\n\n        // set State of Seat : Yes | No exist Player\n        for (let index = 0; index < configPlayer.length; index++) {\n            let findPos = arrPlayerPosExist.indexOf(configPlayer[index].playerPos);\n\n            var seatId = configPlayer[index].seatId;\n            this.getPlayerHouse(seatId).resetPlayerInfo();\n            if (findPos > -1) {\n                // Exist player -> Set Player Info\n                if (seatId == 0 && arrPlayerStatus[findPos] == cmd.Code.PLAYER_STATUS_SITTING) {\n                    this.showPopupBuyIn(minBuyInTiLe, maxBuyInTiLe, moneyBet);\n                }\n\n                if (arrPlayerStatus[findPos] == cmd.Code.PLAYER_STATUS_SITTING || arrPlayerStatus[findPos] == cmd.Code.PLAYER_STATUS_PLAYING) {\n                    configPlayer[index].isViewer = false;\n                    this.getPlayerHouse(seatId).setIsViewer(false);\n                } else {\n                    configPlayer[index].isViewer = true;\n                    this.getPlayerHouse(seatId).setIsViewer(true);\n                    if (configPlayer[seatId].playerId != -1) {\n                        this.getPlayerHouse(seatId).playFxViewer();\n                    }\n                }\n                this.setupSeatPlayer(seatId, arrPlayerInfo[findPos]);\n            } else {\n                // Not Exist player  -> Active Btn Add player\n                this.getPlayerHouse(seatId).showBtnInvite(true);\n                configPlayer[index].isViewer = true;\n            }\n        }\n\n        for (let index = 0; index < cmd.Code.MAX_PLAYER; index++) {\n            this.getPlayerHouse(index).setOwner(false);\n        }\n        let seatOwner = this.findPlayerSeatByPos(roomOwner);\n        if (seatOwner !== -1) {\n            this.getPlayerHouse(seatOwner).setOwner(true);\n            this.seatOwner = seatOwner;\n        }\n\n        //  cc.log(\"Poker setupMatch configPlayer : \", configPlayer);\n    }\n\n\n    // Time Start\n    startThinkingCountDown(seatId, turnTime) {\n        this.timeThinking = turnTime;\n        this.unschedule(this.intervalThinking);\n        this.schedule(this.intervalThinking = () => {\n            this.timeThinking--;\n            var rate = (this.timeThinking / turnTime).toFixed(2);\n            this.getPlayerHouse(seatId).processThinking(rate);\n            if (this.timeThinking < 1) {\n                this.unschedule(this.intervalThinking);\n                this.getPlayerHouse(seatId).hidePlayCountdown();\n            }\n        }, 1)\n    }\n\n    startWaittingCountDown(timeWait) {\n        this.timeAutoStart = timeWait;\n        this.setTimeWaittingCountDown();\n        this.notifyTimeStart.active = true;\n        this.unschedule(this.intervalWaitting);\n        this.schedule(this.intervalWaitting = () => {\n            this.timeAutoStart--;\n            this.setTimeWaittingCountDown();\n            if (this.timeAutoStart < 1) {\n                this.unschedule(this.intervalWaitting);\n                this.notifyTimeStart.active = false;\n            }\n        }, 1)\n    }\n\n    setTimeWaittingCountDown() {\n        this.seconds = Math.floor(this.timeAutoStart % 60);\n        this.notifyTimeStart.getComponent(cc.Label).string = \" Bắt đầu sau : \" + this.seconds + \"s \";\n    }\n\n    // Time End\n    startEndCountDown(timeWait) {\n        this.timeEnd = timeWait;\n        this.setTimeEndCountDown();\n        this.notifyTimeEnd.active = true;\n        this.unschedule(this.intervalEnd);\n        this.schedule(this.intervalEnd = () => {\n            this.timeEnd--;\n            this.setTimeEndCountDown();\n            if (this.timeEnd < 1) {\n                this.unschedule(this.intervalEnd);\n                this.notifyTimeEnd.active = false;\n            }\n        }, 1)\n    }\n\n    setTimeEndCountDown() {\n        this.seconds = Math.floor(this.timeEnd % 60);\n        this.notifyTimeEnd.getComponent(cc.Label).string = \" Kết thúc sau : \" + this.seconds + \"s \";\n    }\n\n    // Time Bet\n    startBettingCountDown(turnTime) {\n        //  cc.log(\"Poker startBettingCountDown turnTime : \", turnTime);\n        this.timeBet = turnTime;\n        this.actionBetting.active = true;\n        this.processBetting(1);\n        this.unschedule(this.intervalBetting);\n        this.schedule(this.intervalBetting = () => {\n            this.timeBet--;\n            var rate = (this.timeBet / turnTime).toFixed(1);\n            this.processBetting(rate);\n            if (this.timeBet < 1) {\n                this.unschedule(this.intervalBetting);\n                this.actionBetting.active = false;\n            }\n        }, 1);\n    }\n\n    processBetting(rate) {\n        //  cc.log(\"Poker processBetting rate : \", rate);\n        //  cc.log(\"Poker processBetting fillRange : \", this.actionBetting.children[0].getComponent(cc.Sprite).fillRange);\n        this.actionBetting.children[0].getComponent(cc.Sprite).fillRange = rate;\n    }\n\n    // Open Me Card\n    openMeCard(event, itemId) {\n        // Open Me cards\n        let cardPos = parseInt(itemId);\n        //  cc.log(\"Poker openMeCard cardPos : \", cardPos);\n        //  cc.log(\"Poker openMeCard currentCard : \", this.currentCard);\n\n        this.getPlayerHouse(0).prepareCardReal(cardPos);\n        let spriteCardId = CardUtils.getNormalId(this.currentCard[cardPos]);\n        this.getPlayerHouse(0).transformToCardReal(cardPos, this.spriteCards[spriteCardId]);\n\n        this.numCardOpened += 1;\n        if (this.numCardOpened == 3) {\n            this.btnOpenCard.active = true;\n            this.btnBet.active = false;\n            this.FxDealer.setAnimation(0, \"cho\", true);\n\n            let score = 0;\n            for (let a = 0; a < 3; a++) {\n                score += CardUtils.getDiemById(this.currentCard[a]);\n            }\n            if (score > 10) {\n                this.getPlayerHouse(0).showCardName((score % 10) + \" Điểm\");\n            } else {\n                this.getPlayerHouse(0).showCardName(score + \" Điểm\");\n            }\n\n            setTimeout(() => {\n                this.getPlayerHouse(0).resetCardReady();\n            }, 200);\n        }\n    }\n\n    moveChipsToHubNow(index) {\n        this.hubChips.children[2 * index].position = cc.v2(25, 80);\n        this.hubChips.children[2 * index].scale = 0;\n        this.hubChips.children[(2 * index) + 1].position = cc.v2(25, 80);\n        this.hubChips.children[(2 * index) + 1].scale = 0;\n    }\n\n    fxMoveChips(chips, delay, toX, toY) {\n        chips.runAction(\n            cc.sequence(\n                cc.delayTime(delay),\n                cc.scaleTo(0, 1, 1),\n                cc.spawn(\n                    cc.moveTo(0.8, toX, toY),\n                    cc.scaleTo(0.8, 0, 0)\n                )\n            )\n        );\n    }\n\n    resetHubChips() {\n        var arrFromX = [70, 280, 280, 260, 100, -260, -375, -360];\n        var arrFromY = [-195, -150, -55, 70, 90, 85, -30, -155];\n\n        for (let index = 0; index < cmd.Code.MAX_PLAYER; index++) {\n            this.hubChips.children[2 * index].position = cc.v2(arrFromX[index], arrFromY[index]);\n            this.hubChips.children[(2 * index) + 1].position = cc.v2(arrFromX[index], arrFromY[index]);\n        }\n\n        for (let index = 0; index < 16; index++) {\n            this.hubChips.children[index].active = false;\n        }\n    }\n\n    setupBet() {\n        // arrBetValue\n        this.currentBetSelectedIndex = 0;\n        this.betChooseValueTarget.y = this.arrBetPos[this.currentBetSelectedIndex];\n    }\n\n    showBtnRaise(state) {\n        this.btnActions.children[0].active = state;\n    }\n\n    showBtnCheck(state) {\n        this.btnActions.children[1].active = state;\n    }\n\n    showBtnCall(state) {\n        this.btnActions.children[2].active = state;\n    }\n\n    resetBtnActions() {\n        for (let index = 0; index < 4; index++) {\n            this.btnActions.children[index].active = true;\n        }\n    }\n\n    showPopupBuyIn(min, max, bet) {\n        this.minCashIn = min;\n        this.maxCashIn = max;\n        this.popupBuyIn.active = true;\n        this.labelBuyInMin.string = Utils.formatNumber(bet * min);\n        if (Configs.Login.Coin > bet * max) {\n            this.labelBuyInMax.string = Utils.formatNumber(bet * max);\n        } else {\n            this.labelBuyInMax.string = Utils.formatNumber(Configs.Login.Coin);\n        }\n        this.edtBuyIn.string = \"\";\n        this.toggleAutoBuyIn.isChecked = true;\n    }\n\n    closePopupBuyIn() {\n        this.popupBuyIn.active = false;\n    }\n\n    textChange(event) {\n        if (event.length > 0) {\n            var rawNumber = \"\";\n            for (let index = 0; index < event.length; index++) {\n                if (event[index] == \"0\"\n                    || event[index] == \"1\"\n                    || event[index] == \"2\"\n                    || event[index] == \"3\"\n                    || event[index] == \"4\"\n                    || event[index] == \"5\"\n                    || event[index] == \"6\"\n                    || event[index] == \"7\"\n                    || event[index] == \"8\"\n                    || event[index] == \"9\") {\n                    rawNumber += event[index];\n                }\n            }\n            //  cc.log(\"Poker onTextChange rawNumber : \", rawNumber);\n            if (rawNumber !== \"\") {\n                this.edtBuyIn.string = Utils.formatNumber(parseInt(rawNumber));\n            } else {\n                this.edtBuyIn.string = \"\";\n            }\n        }\n    }\n\n    // show Center Cards\n    showAllCenterCards(centerCards) {\n        this.currentCenterCard = centerCards;\n        for (let index = 0; index < centerCards.length; index++) {\n            let spriteCardId = CardUtils.getNormalId(centerCards[index]);\n            this.cardsCenter.children[index].getComponent(cc.Sprite).spriteFrame = this.spriteCards[spriteCardId];\n        }\n\n        // dua 3 la len -175, -10 roi xoe ra ben phai\n        setTimeout(() => {\n            this.cardsCenter.children[0].runAction(\n                cc.spawn(\n                    cc.moveTo(0.1, -170, -45),\n                    cc.scaleTo(0.1, 1, 1)\n                )\n            );\n            this.cardsCenter.children[1].runAction(\n                cc.sequence(\n                    cc.spawn(\n                        cc.moveTo(0.1, -17, -45),\n                        cc.scaleTo(0.1, 1, 1)\n                    ),\n                    cc.delayTime(0.1),\n                    cc.moveTo(0.1, -85, -45)\n                )\n            );\n            this.cardsCenter.children[2].runAction(\n                cc.sequence(\n                    cc.spawn(\n                        cc.moveTo(0.1, -170, -45),\n                        cc.scaleTo(0.1, 1, 1)\n                    ),\n                    cc.delayTime(0.1),\n                    cc.moveTo(0.1, 0, -45)\n                )\n            );\n\n            this.cardsCenter.children[3].runAction(\n                cc.sequence(\n                    cc.delayTime(1),\n                    cc.spawn(\n                        cc.moveTo(0.1, 85, -45),\n                        cc.scaleTo(0.1, 1, 1)\n                    ),\n                )\n            );\n\n            this.cardsCenter.children[4].runAction(\n                cc.sequence(\n                    cc.delayTime(1.5),\n                    cc.spawn(\n                        cc.moveTo(0.1, 170, -45),\n                        cc.scaleTo(0.1, 1, 1)\n                    )\n                )\n            );\n        }, 400);\n    }\n\n    showCenterCards1stRound(centerCards) {\n        this.currentCenterCard = centerCards;\n        for (let index = 0; index < centerCards.length; index++) {\n            let spriteCardId = CardUtils.getNormalId(centerCards[index]);\n            this.cardsCenter.children[index].getComponent(cc.Sprite).spriteFrame = this.spriteCards[spriteCardId];\n        }\n\n        this.cardsCenter.children[0].runAction(\n            cc.spawn(\n                cc.moveTo(0.1, -170, -45),\n                cc.scaleTo(0.1, 1, 1)\n            )\n        );\n        this.cardsCenter.children[1].runAction(\n            cc.sequence(\n                cc.spawn(\n                    cc.moveTo(0.1, -17, -45),\n                    cc.scaleTo(0.1, 1, 1)\n                ),\n                cc.delayTime(0.1),\n                cc.moveTo(0.2, -85, -45)\n            )\n        );\n        this.cardsCenter.children[2].runAction(\n            cc.sequence(\n                cc.spawn(\n                    cc.moveTo(0.1, -170, -45),\n                    cc.scaleTo(0.1, 1, 1)\n                ),\n                cc.delayTime(0.1),\n                cc.moveTo(0.2, 0, -45)\n            )\n        );\n    }\n\n    showCenterCards2ndRound(centerCards) {\n        this.currentCenterCard.push(centerCards[0]);\n        let spriteCardId = CardUtils.getNormalId(centerCards[0]);\n        this.cardsCenter.children[3].getComponent(cc.Sprite).spriteFrame = this.spriteCards[spriteCardId];\n\n        this.cardsCenter.children[3].runAction(\n            cc.sequence(\n                cc.delayTime(1),\n                cc.spawn(\n                    cc.moveTo(0.1, 85, -45),\n                    cc.scaleTo(0.1, 1, 1)\n                ),\n            )\n        );\n    }\n\n    showCenterCards3rdRound(centerCards) {\n        this.currentCenterCard.push(centerCards[0]);\n        let spriteCardId = CardUtils.getNormalId(centerCards[0]);\n        this.cardsCenter.children[4].getComponent(cc.Sprite).spriteFrame = this.spriteCards[spriteCardId];\n\n        this.cardsCenter.children[4].runAction(\n            cc.sequence(\n                cc.delayTime(1.5),\n                cc.spawn(\n                    cc.moveTo(0.1, 170, -45),\n                    cc.scaleTo(0.1, 1, 1)\n                )\n            )\n        );\n    }\n\n    // addListener\n    setupListener() {\n        PokerNetworkClient.getInstance().addListener((data) => {\n            let inpacket = new InPacket(data);\n            switch (inpacket.getCmdId()) {\n                case cmd.Code.JOIN_ROOM_SUCCESS:\n                    {\n                        //  cc.log(\"Poker JOIN_ROOM_SUCCESS\");\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedJoinRoomSucceed(data);\n                        //  cc.log(\"Poker JOIN_ROOM_SUCCESS res : \", JSON.stringify(res));\n                        this.closeUIRoom();\n                        this.setupMatch(res);\n                    }\n                    break;\n                case cmd.Code.THONG_TIN_BAN_CHOI:  // Reconnect\n                    {\n                        //  cc.log(\"Poker THONG_TIN_BAN_CHOI\");\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedGameInfo(data);\n                        //  cc.log(\"Poker THONG_TIN_BAN_CHOI res : \", JSON.stringify(res));\n\n                        // {\n                        //     \"maxPlayer\": 9,\n                        //     \"chair\": 0,\n                        //     \"myCardSize\": 2,\n                        //     \"myCards\": [13, 22],\n                        //     \"publicCardSize\": 3,\n                        //     \"publicCards\": [7, 37, 15],\n                        //     \"dealerChair\": 0,\n                        //     \"smallBlindChair\": 1,\n                        //     \"bigBlindChair\": 2,\n                        //     \"potAmount\": 31000,\n                        //     \"maxBet\": 4000,\n                        //     \"raiseStep\": 4000,\n                        //     \"roundId\": 1,\n                        //     \"gameServerState\": 1,\n                        //     \"gameAction\": 4,\n                        //     \"countDownTime\": 9,\n                        //     \"currentActiveChair\": 1,\n                        //     \"moneyType\": 1,\n                        //     \"bet\": 500,\n                        //     \"gameId\": 1351,\n                        //     \"roomId\": 93,\n                        //     \"hasInfoSize\": 9,\n                        //     \"hasInfoList\": [1, 1, 1, 0, 0, 0, 0, 0, 0],\n                        //     \"playerInfoList\": [[], [], [], [], [], [], [], [], []]\n                        // }\n\n                        let chair = res[\"chair\"];\n                        let myCardSize = res[\"myCardSize\"];\n                        let myCards = res[\"myCards\"];\n                        let publicCardSize = res[\"publicCardSize\"];\n                        let publicCards = res[\"publicCards\"];\n                        let dealerChair = res[\"dealerChair\"];\n                        let smallBlindChair = res[\"smallBlindChair\"];\n                        let bigBlindChair = res[\"bigBlindChair\"];\n                        let potAmount = res[\"potAmount\"];\n                        let maxBet = res[\"maxBet\"];\n                        let raiseStep = res[\"raiseStep\"];\n                        let roundId = res[\"roundId\"];\n                        let gameServerState = res[\"gameServerState\"];\n                        let gameAction = res[\"gameAction\"];\n                        let countDownTime = res[\"countDownTime\"];\n                        let currentActiveChair = res[\"currentActiveChair\"];\n                        let bet = res[\"bet\"];\n                        let gameId = res[\"gameId\"];\n                        let roomId = res[\"roomId\"];\n                        let hasInfoSize = res[\"hasInfoSize\"];\n                        let hasInfoList = res[\"hasInfoList\"];\n                        let playerInfoList = res[\"playerInfoList\"];\n\n                        this.closeUIRoom();\n                        this.showUIPlaying();\n                        this.closeUIChat();\n\n                        this.labelRoomId.string = \"POKER - PHÒNG: \" + roomId;\n                        this.labelRoomBet.string = \"MỨC CƯỢC: \" + Utils.formatNumber(bet) + \"/\" + Utils.formatNumber(2 * bet) + \"$\";\n\n                        this.currentRoomBet = bet;\n                        this.currentCard = myCards;\n\n                        if (potAmount != null) {\n                            this.matchPot.active = true;\n                            this.currentMatchPotValue = potAmount;\n                            this.labelMatchPot.string = Utils.formatNumber(potAmount);\n                        }\n\n                        if (maxBet != null) {\n                            this.currentMaxBet = maxBet;\n                        }\n\n                        if (raiseStep != null) {\n                            this.currentRaiseStep = raiseStep;\n                        }\n\n                        this.currentRaiseValue = this.currentMaxBet + this.currentRaiseStep;\n                        this.currentRaiseMin = this.currentMaxBet + this.currentRaiseStep;\n\n                        if (publicCardSize > 0) {\n                            if (publicCardSize == 3) {\n                                this.showCenterCards1stRound(publicCards);\n                            } else if (publicCardSize == 4) {\n                                let round_1 = [publicCards[0], publicCards[1], publicCards[2]];\n                                let round_2 = publicCards[3];\n                                this.showCenterCards1stRound(round_1);\n                                this.showCenterCards2ndRound(round_2);\n                            } else if (publicCardSize == 5) {\n                                this.showAllCenterCards(publicCards);\n                            }\n                        }\n\n                        configPlayer[0].playerId = Configs.Login.Nickname;\n                        configPlayer[0].playerPos = chair;\n                        //  cc.log(\"Poker setupMatch configPlayer Me : \", configPlayer[0]);\n                        //  cc.log(\"Poker setupMatch configPlayer  : \", configPlayer);\n\n                        var numPlayers = 0;\n                        var arrPlayerPosExist = [];\n\n                        for (let index = 0; index < cmd.Code.MAX_PLAYER; index++) {\n                            if (hasInfoList[index]) {\n                                numPlayers += 1;\n                                arrPlayerPosExist.push(index);\n                            }\n                        }\n                        //  cc.log(\"Poker numPlayers : \", numPlayers);\n\n                        // setup configPlayer\n                        for (let a = 0; a < configPlayer.length; a++) {\n                            configPlayer[a].playerPos = defaultPlayerPos[chair][a];\n                        }\n\n                        // set State of Seat : Yes | No exist Player\n                        for (let index = 0; index < configPlayer.length; index++) {\n                            let findPos = arrPlayerPosExist.indexOf(configPlayer[index].playerPos);\n\n                            var seatId = configPlayer[index].seatId;\n                            this.getPlayerHouse(seatId).resetPlayerInfo();\n\n                            if (findPos > -1) {\n                                // Exist player -> Set Player Info\n                                this.getPlayerHouse(seatId).setIsViewer(false);\n                                this.setupSeatPlayer(seatId, {\n                                    nickName: playerInfoList[index].nickName,\n                                    avatar: playerInfoList[index].avatar,\n                                    currentMoney: playerInfoList[index].currentMoney,\n                                });\n\n                                if (seatId != 0) {\n                                    this.getPlayerHouse(seatId).showCardReady(true);\n                                    this.getPlayerHouse(seatId).showCardReal(false);\n                                }\n\n                                if (playerInfoList[index].currentBet > 0) {\n                                    this.getPlayerHouse(seatId).setBet(playerInfoList[index].currentBet);\n                                    this.getPlayerHouse(seatId).addChips();\n                                }\n\n                                if (playerInfoList[index].fold) {\n                                    this.getPlayerHouse(seatId).showActionState(\"ÚP\");\n                                    if (seatId == 0) {\n                                        this.isFolded = true;\n                                    }\n                                }\n\n                                if (playerInfoList[index].hasAllIn) {\n                                    this.getPlayerHouse(seatId).showActionState(\"ALL-IN\");\n                                }\n                            } else {\n                                // Not Exist player  -> Active Btn Add player\n                                this.getPlayerHouse(seatId).showBtnInvite(true);\n                                configPlayer[index].isViewer = true;\n                            }\n                        }\n\n                        for (let index = 0; index < cmd.Code.MAX_PLAYER; index++) {\n                            this.getPlayerHouse(index).setDealer(false);\n                            this.getPlayerHouse(index).setSmallBind(false);\n                            this.getPlayerHouse(index).setBigBind(false);\n                        }\n\n                        let dealerSeatId = this.findPlayerSeatByPos(dealerChair);\n                        if (dealerSeatId != -1) {\n                            this.getPlayerHouse(dealerChair).setDealer(true);\n                        }\n\n                        let sbSeatId = this.findPlayerSeatByPos(smallBlindChair);\n                        if (sbSeatId != -1) {\n                            this.getPlayerHouse(sbSeatId).setSmallBind(true);\n                        }\n\n                        let bbSeatId = this.findPlayerSeatByPos(bigBlindChair);\n                        if (bbSeatId != -1) {\n                            this.getPlayerHouse(bbSeatId).setBigBind(true);\n                        }\n\n                        let activeSeatId = this.findPlayerSeatByPos(currentActiveChair);\n                        if (activeSeatId != -1) {\n                            this.getPlayerHouse(activeSeatId).showPlayCountdown();\n                            this.startThinkingCountDown(activeSeatId, countDownTime);\n                        }\n\n                        // Open Me cards\n                        if (myCardSize > 0) {\n                            this.getPlayerHouse(0).showCardReady(false);\n                            for (let a = 0; a < 2; a++) {\n                                //  cc.log(\"Poker cardId : \", myCards[a]);\n                                let spriteCardId = CardUtils.getNormalId(myCards[a]);\n                                this.getPlayerHouse(0).prepareToTransform();\n                                this.getPlayerHouse(0).transformToCardReal(a, this.spriteCards[spriteCardId]);\n                            }\n                        }\n\n                        this.resetHubChips();\n                    }\n                    break;\n                case cmd.Code.DANG_KY_THOAT_PHONG:\n                    {\n                        //  cc.log(\"Poker DANG_KY_THOAT_PHONG\");\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedNotifyRegOutRoom(data);\n                        //  cc.log(\"Poker DANG_KY_THOAT_PHONG res : \", JSON.stringify(res));\n                        let outChair = res[\"outChair\"];\n                        let isOutRoom = res[\"isOutRoom\"];\n\n                        let seatId = this.findPlayerSeatByPos(outChair);\n                        if (seatId !== -1) {\n                            if (isOutRoom) {\n                                this.getPlayerHouse(seatId).showNotify(\"Sắp rời bàn !\");\n                            } else {\n                                this.getPlayerHouse(seatId).showNotify(\"Khô Máu !\");\n                            }\n                        }\n                    }\n                    break;\n                case cmd.Code.NEW_USER_JOIN:\n                    {\n                        //  cc.log(\"Poker NEW_USER_JOIN\");\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedUserJoinRoom(data);\n                        //  cc.log(\"Poker NEW_USER_JOIN res : \", JSON.stringify(res));\n\n                        let nickName = res[\"info\"][\"nickName\"];\n                        let avatar = res[\"info\"][\"avatar\"];\n                        let currentMoney = res[\"info\"][\"money\"];\n                        let chair = res[\"uChair\"];\n                        let status = res[\"uStatus\"];\n\n                        // set State of Seat : Yes | No exist Player\n                        for (let index = 0; index < configPlayer.length; index++) {\n                            if (configPlayer[index].playerPos == chair) {\n                                // Exist player -> Set Player Info\n                                var seatId = configPlayer[index].seatId;\n                                this.getPlayerHouse(seatId).resetPlayerInfo();\n                                var customPlayerInfo = {\n                                    \"avatar\": avatar,\n                                    \"nickName\": nickName,\n                                    \"currentMoney\": currentMoney,\n                                }\n\n                                this.setupSeatPlayer(seatId, customPlayerInfo);\n\n                                if (status == cmd.Code.PLAYER_STATUS_VIEWER) {\n                                    this.getPlayerHouse(seatId).setIsViewer(true);\n                                    configPlayer[seatId].isViewer = true;\n                                    if (configPlayer[seatId].playerId != -1) {\n                                        this.getPlayerHouse(seatId).playFxViewer();\n                                    }\n                                } else {\n                                    this.getPlayerHouse(seatId).setIsViewer(false);\n                                    configPlayer[seatId].isViewer = false;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case cmd.Code.LEAVE_GAME:\n                    {\n                        //  cc.log(\"Poker LEAVE_GAME\");\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedUserLeaveRoom(data);\n                        //  cc.log(\"Poker LEAVE_GAME res : \", JSON.stringify(res));\n                        let chair = res[\"chair\"];\n\n                        let seatId = this.findPlayerSeatByPos(chair);\n                        if (seatId !== -1) {\n                            // Need clear configPlayer\n                            for (let index = 0; index < configPlayer.length; index++) {\n                                if (configPlayer[index].seatId == seatId) {\n                                    configPlayer[index].playerId = -1;\n                                    configPlayer[index].isViewer = true;\n                                }\n                            }\n\n                            // Change UI\n                            this.getPlayerHouse(seatId).resetPlayerInfo();\n                            this.getPlayerHouse(seatId).showBtnInvite(true);\n\n                            let arrSeatExistLast = this.getNumPlayers();\n                            if (arrSeatExistLast.length == 1) {\n                                this.resetPlayersPlaying();\n                                this.resetCenterCards();\n                                this.matchPot.active = false;\n                            }\n\n                            if (seatId == 0) {\n                                // Me leave\n                                // Change UI\n                                this.UI_Playing.active = false;\n                                this.UI_ChooseRoom.active = true;\n                            }\n                        }\n                    }\n                    break;\n                case cmd.Code.TAKE_TURN:\n                    {\n                        //  cc.log(\"Poker TAKE_TURN\");\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedTakeTurn(data);\n                        //  cc.log(\"Poker TAKE_TURN res : \", JSON.stringify(res));\n\n                        // {\n                        //     \"actionChair\": 1,\n                        //     \"action\": 2,\n                        //     \"lastRaise\": 500,\n                        //     \"currentBet\": 1000,\n                        //     \"maxBet\": 1000,\n                        //     \"currentMoney\": 29000,\n                        //     \"raiseStep\": 1000,\n                        //     \"raiseBlock\": 0\n                        // }\n\n                        let actionChair = res[\"actionChair\"];\n                        let action = res[\"action\"];\n                        let lastRaise = res[\"lastRaise\"];\n                        let currentBet = res[\"currentBet\"];\n                        let maxBet = res[\"maxBet\"];\n                        let currentMoney = res[\"currentMoney\"];\n                        let raiseStep = res[\"raiseStep\"];\n                        let raiseBlock = res[\"raiseBlock\"];\n\n                        //  cc.log(\"Poker TAKE_TURN actionChair : \", actionChair);\n                        //  cc.log(\"Poker TAKE_TURN action : \", action);\n                        //  cc.log(\"Poker TAKE_TURN lastRaise : \", lastRaise);\n                        //  cc.log(\"Poker TAKE_TURN currentBet : \", currentBet);\n                        //  cc.log(\"Poker TAKE_TURN maxBet : \", maxBet);\n                        //  cc.log(\"Poker TAKE_TURN currentMoney : \", currentMoney);\n                        //  cc.log(\"Poker TAKE_TURN raiseStep : \", raiseStep);\n                        //  cc.log(\"Poker TAKE_TURN raiseBlock : \", raiseBlock);\n\n                        this.currentMaxBet = maxBet;\n                        this.currentRaiseStep = raiseStep;\n\n                        let seatId = this.findPlayerSeatByPos(actionChair);\n                        if (seatId != -1) {\n                            if (seatId == 0) {\n                                this.lastMeBet = this.currentMeBet;\n                                this.currentMeBet = currentBet;\n                            }\n\n                            let actionName = \"\";\n                            switch (action) {\n                                case cmd.Code.GAME_ACTION_FOLD:\n                                    actionName = \"ÚP\";\n                                    this.getPlayerHouse(seatId).fxMeFold();\n                                    if (seatId == 0) {\n                                        this.isFolded = true;\n                                    }\n                                    break;\n                                case cmd.Code.GAME_ACTION_CHECK:\n                                    actionName = \"XEM\";\n                                    break;\n                                case cmd.Code.GAME_ACTION_CALL:\n                                    actionName = \"THEO\";\n                                    // Other Player call\n                                    // if (seatId != 0) {\n                                    //     this.currentMeBet = 0;\n                                    // }\n                                    this.getPlayerHouse(seatId).addChips();\n                                    break;\n                                case cmd.Code.GAME_ACTION_RAISE:\n                                    actionName = \"TỐ\";\n                                    this.getPlayerHouse(seatId).setBet(currentBet);\n                                    this.getPlayerHouse(seatId).addChips();\n                                    // sang turn moi, khi player truoc Raise va minh chua Bet gi\n                                    // if (seatId != 0 && this.currentMeBet == 0) {\n                                    //     this.currentMeBet = lastRaise;\n                                    // }\n                                    break;\n                                case cmd.Code.GAME_ACTION_ALL_IN:\n                                    actionName = \"ALL-IN\";\n                                    this.getPlayerHouse(seatId).setBet(currentBet);\n                                    this.getPlayerHouse(seatId).addChips();\n                                    this.getPlayerHouse(seatId).addChips();\n                                    break;\n                                default:\n                                    break;\n                            }\n                            this.getPlayerHouse(seatId).setGold(currentMoney);\n                            this.getPlayerHouse(seatId).showActionState(actionName);\n                        }\n                    }\n                    break;\n                case cmd.Code.SELECT_DEALER:\n                    {\n                        //  cc.log(\"Poker SELECT_DEALER\");\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedSelectDealer(data);\n                        //  cc.log(\"Poker SELECT_DEALER res : \", JSON.stringify(res));\n\n                        let dealerChair = res[\"dealerChair\"];\n                        let smallBlindChair = res[\"smallBlindChair\"];\n                        let bigBlindChair = res[\"bigBlindChair\"];\n                        let hasInfoSize = res[\"hasInfoSize\"];\n                        let hasInfoList = res[\"hasInfoList\"];\n                        let playerStatusList = res[\"playerStatusList\"];\n                        let gameId = res[\"gameId\"];\n                        let isCheat = res[\"isCheat\"];\n                        let currentMoneySize = res[\"currentMoneySize\"];\n                        let currentMoneyList = res[\"currentMoneyList\"];\n                        let size = res[\"size\"];\n                        let listBetBigBlind = res[\"listBetBigBlind\"];\n\n                        //  cc.log(\"Poker SELECT_DEALER dealerChair : \", dealerChair);\n                        //  cc.log(\"Poker SELECT_DEALER smallBlindChair : \", smallBlindChair);\n                        //  cc.log(\"Poker SELECT_DEALER bigBlindChair : \", bigBlindChair);\n                        //  cc.log(\"Poker SELECT_DEALER hasInfoSize : \", hasInfoSize);\n                        //  cc.log(\"Poker SELECT_DEALER hasInfoList : \", hasInfoList);\n                        //  cc.log(\"Poker SELECT_DEALER playerStatusList : \", playerStatusList);\n                        //  cc.log(\"Poker SELECT_DEALER gameId : \", gameId);\n                        //  cc.log(\"Poker SELECT_DEALER isCheat : \", isCheat);\n                        //  cc.log(\"Poker SELECT_DEALER currentMoneySize : \", currentMoneySize);\n                        //  cc.log(\"Poker SELECT_DEALER currentMoneyList : \", currentMoneyList);\n                        //  cc.log(\"Poker SELECT_DEALER size : \", size);\n                        //  cc.log(\"Poker SELECT_DEALER listBetBigBlind : \", listBetBigBlind);\n\n                        // set Dealer, SB, BB state\n                        for (let index = 0; index < cmd.Code.MAX_PLAYER; index++) {\n                            this.getPlayerHouse(index).setDealer(false);\n                            this.getPlayerHouse(index).setSmallBind(false);\n                            this.getPlayerHouse(index).setBigBind(false);\n                        }\n\n                        let seatIdDealer = this.findPlayerSeatByPos(dealerChair);\n                        if (seatIdDealer != -1) {\n                            this.getPlayerHouse(seatIdDealer).setDealer(true);\n                        }\n\n                        let seatIdSmallBind = this.findPlayerSeatByPos(smallBlindChair);\n                        if (seatIdSmallBind != -1) {\n                            if (seatIdSmallBind == 0) {\n                                this.currentMeBet = this.currentRoomBet;\n                            }\n                            this.getPlayerHouse(seatIdSmallBind).setSmallBind(true);\n                            this.getPlayerHouse(seatIdSmallBind).setBet(this.currentRoomBet);\n                            this.getPlayerHouse(seatIdSmallBind).addChips();\n                        }\n\n                        let seatIdBigBind = this.findPlayerSeatByPos(bigBlindChair);\n                        if (seatIdBigBind != -1) {\n                            if (seatIdBigBind == 0) {\n                                this.currentMeBet = 2 * this.currentRoomBet;\n                            }\n                            this.getPlayerHouse(seatIdBigBind).setBigBind(true);\n                            this.getPlayerHouse(seatIdBigBind).setBet(2 * this.currentRoomBet);\n                            this.getPlayerHouse(seatIdBigBind).addChips();\n                            this.getPlayerHouse(seatIdBigBind).addChips();\n                        }\n\n                        this.currentMatchPotValue = 0;\n                        this.labelMatchPot.string = \"0\";\n                        this.currentMaxBet = 2 * this.currentRoomBet;\n                        this.currentRaiseStep = 2 * this.currentRoomBet;\n                        this.currentRaiseValue = this.currentMaxBet + this.currentRaiseStep;\n                        //  cc.log(\"Poker SELECT_DEALER currentMeBet : \", this.currentMeBet);\n                        //  cc.log(\"Poker SELECT_DEALER currentRaiseStep : \", this.currentRaiseStep);\n                        //  cc.log(\"Poker SELECT_DEALER currentRaiseValue : \", this.currentRaiseValue);\n\n                        // update Gold\n                        for (let index = 0; index < currentMoneyList.length; index++) {\n                            let seatId = this.findPlayerSeatByPos(index);\n                            this.getPlayerHouse(seatId).setGold(currentMoneyList[index]);\n                            if (currentMoneyList[index] == 0) {\n                                configPlayer[seatId].isViewer = true;\n                                configPlayer[seatId][\"isViewer\"] = true;\n                                this.getPlayerHouse(seatId).setIsViewer(true);\n                                if (configPlayer[seatId].playerId != -1) {\n                                    this.getPlayerHouse(seatId).playFxViewer();\n                                }\n\n                            }\n                        }\n                    }\n                    break;\n                case cmd.Code.BUY_IN:\n                    {\n                        //  cc.log(\"Poker BUY_IN\");\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedBuyIn(data);\n                        //  cc.log(\"Poker BUY_IN res : \", JSON.stringify(res));\n\n                        let chair = res[\"chair\"];\n                        let buyInMoney = res[\"buyInMoney\"];\n\n                        //  cc.log(\"Poker BUY_IN chair : \", chair);\n                        //  cc.log(\"Poker BUY_IN buyInMoney : \", buyInMoney);\n\n                        let seatId = this.findPlayerSeatByPos(chair);\n                        if (seatId != -1) {\n                            if (seatId == 0) {\n                                // Me buy in\n                                App.instance.showLoading(false);\n                            }\n\n                            this.getPlayerHouse(seatId).setGold(buyInMoney);\n                        }\n                    }\n                    break;\n                case cmd.Code.DEAL_PRIVATE_CARD:\n                    {\n                        //  cc.log(\"Poker DEAL_PRIVATE_CARD\");\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedDealCards(data);\n                        //  cc.log(\"Poker DEAL_PRIVATE_CARD res : \", JSON.stringify(res));\n\n                        let chair = res[\"chair\"];\n                        let sizeCard = res[\"sizeCard\"];\n                        let myCards = res[\"myCards\"];\n                        let boBaiId = res[\"boBaiId\"];\n\n                        // Fix cung -> can tim cach set first raise step\n\n                        //  cc.log(\"Poker DEAL_PRIVATE_CARD chair  : \", chair);\n                        //  cc.log(\"Poker DEAL_PRIVATE_CARD sizeCard : \", sizeCard);\n                        //  cc.log(\"Poker DEAL_PRIVATE_CARD myCards : \", myCards);\n                        //  cc.log(\"Poker DEAL_PRIVATE_CARD boBaiId : \", boBaiId);\n\n                        this.btnBet.active = false;\n                        this.btnOpenCard.active = false;\n                        this.matchPot.active = true;\n\n                        this.FxDealer.setAnimation(0, \"cho\", true);\n\n                        this.currentCard = myCards;\n                        //  cc.log(\"Poker ReceivedChiaBai currentCard : \", this.currentCard);\n\n                        var arrSeatExist = this.getNumPlayers();\n                        let numPlayer = arrSeatExist.length;\n                        //  cc.log(\"Poker ReceivedChiaBai arrSeatExist : \", arrSeatExist);\n                        //  cc.log(\"Poker ReceivedChiaBai numPlayer : \", numPlayer);\n\n                        // Open | Hide cards not use\n                        for (let index = 0; index < cmd.Code.MAX_PLAYER * 2; index++) { // 8 players * 2 cards\n                            this.cardsDeal.children[index].active = index >= numPlayer * 2 ? false : true;\n                            this.cardsDeal.children[index].position = cc.v2(0, 0);\n                        }\n\n                        // Move Cards used to each player joined\n                        for (let a = 0; a < 2; a++) { // players x 2 cards\n                            for (let b = 0; b < numPlayer; b++) {\n                                let seatId = arrSeatExist[b];\n                                if (seatId !== -1) {\n                                    let card4Me = this.cardsDeal.children[(a * numPlayer) + b];\n                                    let rawPlayerPos = this.groupPlayers.children[seatId].position;\n                                    //  cc.log(\"Poker CHIA_BAI delayTime : \", ((a * numPlayer) + b) * 0.15);\n                                    card4Me.runAction(\n                                        cc.sequence(\n                                            cc.delayTime(((a * numPlayer) + b) * 0.15),\n                                            cc.moveTo(0.2, rawPlayerPos)\n                                        )\n                                    );\n                                }\n                            }\n                        }\n\n                        let delayOver2Under = 0.2;\n                        var maxDelay = ((1 * numPlayer) + (numPlayer - 1)) * 0.15; // ((a * numPlayer) + b) * 0.15\n                        let timeUnderLayer = (maxDelay + 0.2 + delayOver2Under) * 1000;\n                        //  cc.log(\"CHIA_BAI timeUnderLayer : \", timeUnderLayer);\n                        clearTimeout(this.timeoutChiaBaiDone);\n                        this.timeoutChiaBaiDone = setTimeout(() => {\n                            for (let index = 0; index < cmd.Code.MAX_PLAYER * 2; index++) { // 8 players * 2 cards\n                                //  cc.log(\"CHIA_BAI cardsDeal index : \", index);\n                                this.cardsDeal.children[index].active = false;\n                            }\n\n                            for (let index = 0; index < numPlayer; index++) {\n                                let seatId = arrSeatExist[index];\n                                if (seatId !== -1) {\n                                    // Drop layer\n                                    this.getPlayerHouse(seatId).showCardReady(true);\n                                    this.getPlayerHouse(seatId).showCardReal(false);\n                                }\n                            }\n\n                            // Open Me cards\n                            for (let a = 0; a < 2; a++) {\n                                //  cc.log(\"Poker cardId : \", myCards[a]);\n                                let spriteCardId = CardUtils.getNormalId(myCards[a]);\n                                this.getPlayerHouse(0).prepareToTransform();\n                                this.getPlayerHouse(0).transformToCardReal(a, this.spriteCards[spriteCardId]);\n                            }\n                            let cardName = this.getCardsName(boBaiId);\n                            this.getPlayerHouse(0).showCardName(cardName);\n                        }, timeUnderLayer);\n\n                    }\n                    break;\n                case cmd.Code.NEW_ROUND:\n                    {\n                        //  cc.log(\"Poker NEW_ROUND\");\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedNewBetRound(data);\n                        //  cc.log(\"Poker NEW_ROUND res : \", JSON.stringify(res));\n\n                        // {\n                        //     \"roundId\": 1,\n                        //     \"sizeCard\": 3,\n                        //     \"plusCards\": [\n                        //       0,\n                        //       36,\n                        //       27\n                        //     ],\n                        //     \"cardName\": 9,\n                        //     \"potAmount\": 4000\n                        //   }\n\n                        let roundId = res[\"roundId\"];\n                        let sizeCard = res[\"sizeCard\"];\n                        let plusCards = res[\"plusCards\"];\n                        let cardName = res[\"cardName\"];\n                        let potAmount = res[\"potAmount\"];\n\n                        //  cc.log(\"Poker NEW_ROUND roundId : \", roundId);\n                        //  cc.log(\"Poker NEW_ROUND sizeCard : \", sizeCard);\n                        //  cc.log(\"Poker NEW_ROUND plusCards : \", plusCards);\n                        //  cc.log(\"Poker NEW_ROUND cardName : \", cardName);\n                        //  cc.log(\"Poker NEW_ROUND potAmount : \", potAmount);\n\n                        this.matchPot.active = true;\n                        this.currentMatchPotValue = potAmount;\n                        this.labelMatchPot.string = Utils.formatNumber(potAmount);\n\n                        this.currentMeBet = 0;\n\n                        this.currentMaxBet = 0;\n                        this.currentRaiseStep = 2 * this.currentRoomBet;\n                        this.currentRaiseValue = this.currentMaxBet + this.currentRaiseStep;\n                        for (let index = 0; index < cmd.Code.MAX_PLAYER; index++) {\n                            this.getPlayerHouse(index).showPlayerBet(false);\n                        }\n\n                        if (!this.isFolded) {\n                            switch (roundId) {\n                                case 1:\n                                    this.showCenterCards1stRound(plusCards);\n                                    break;\n                                case 2:\n                                    this.showCenterCards2ndRound(plusCards);\n                                    break;\n                                case 3:\n                                    this.showCenterCards3rdRound(plusCards);\n                                    break;\n                                default:\n                                    break;\n                            }\n                        } else {\n                            //  cc.log(\"Poker NEW_ROUND Me is folded -> Can not see center cards\");\n                        }\n\n                        this.getPlayerHouse(0).showCardName(this.getCardsName(cardName));\n                    }\n                    break;\n                case cmd.Code.CHANGE_TURN:\n                    {\n                        //  cc.log(\"Poker CHANGE_TURN\");\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedChangeTurn(data);\n                        //  cc.log(\"Poker CHANGE_TURN res : \", JSON.stringify(res));\n\n                        let roundId = res[\"roundId\"];\n                        let chair = res[\"chair\"];\n                        let betTime = res[\"betTime\"];\n\n                        //  cc.log(\"Poker CHANGE_TURN roundId : \", roundId);\n                        //  cc.log(\"Poker CHANGE_TURN chair : \", chair);\n                        //  cc.log(\"Poker CHANGE_TURN betTime : \", betTime);\n\n                        this.resetAllPlayerCountdown();\n\n                        let seatId = this.findPlayerSeatByPos(chair);\n                        if (seatId != -1) {\n                            this.getPlayerHouse(seatId).showPlayCountdown();\n                            this.startThinkingCountDown(seatId, betTime);\n                            if (seatId == 0) {\n                                this.btnBet.active = true;\n                                this.FxDealer.setAnimation(0, \"noti\", true);\n                                this.btnOpenCard.active = false;\n\n                                this.setupBet();\n\n                                this.currentRaiseValue = this.currentMaxBet + this.currentRaiseStep;\n                                this.currentRaiseMin = this.currentMaxBet + this.currentRaiseStep;\n\n                                // Neu ma minBet > currentMeGold thi an nut Raise di, chi cho Fold | All-In\n                                let currentMeGold = this.getPlayerHouse(0).getGold();\n\n                                // dang gap loi minBet sai, dat minBet k dc, phải dc ++1 mới dc\n                                //  cc.log(\"Poker_BET =======================================\", roundId);\n                                //  cc.log(\"Poker_BET currentMaxBet : \", this.currentMaxBet);\n                                //  cc.log(\"Poker_BET currentRaiseStep : \", this.currentRaiseStep);\n                                //  cc.log(\"Poker_BET currentRaiseMin : \", this.currentRaiseMin);\n                                //  cc.log(\"Poker_BET currentRaiseValue : \", this.currentRaiseValue);\n                                //  cc.log(\"Poker_BET currentMeBet : \", this.currentMeBet);\n                                //  cc.log(\"Poker_BET lastMeBet : \", this.lastMeBet);\n                                //  cc.log(\"Poker_BET currentMeGold : \", currentMeGold);\n                                //  cc.log(\"Poker_BET currentRoomBet : \", this.currentRoomBet);\n                                //  cc.log(\"Poker_BET currentMatchPotValue : \", this.currentMatchPotValue);\n\n                                let btn_01 = this.currentRaiseValue;\n                                let btn_02 = -1;\n                                let btn_03 = -1;\n                                if (roundId == 0) {\n                                    btn_02 = Math.max(4 * this.currentRoomBet, this.currentRaiseStep) + this.currentMaxBet;\n                                    btn_03 = Math.max(6 * this.currentRoomBet, this.currentRaiseStep) + this.currentMaxBet;\n                                } else {\n                                    btn_02 = Math.max(this.currentMatchPotValue / 2, this.currentRaiseStep) + this.currentMaxBet;\n                                    btn_03 = Math.max(this.currentMatchPotValue, this.currentRaiseStep) + this.currentMaxBet;\n                                }\n\n\n                                this.arrBetValue = [];\n                                this.arrBetValue.push(btn_01 - this.currentMeBet);\n                                this.arrBetValue.push(btn_02 - this.currentMeBet);\n                                this.arrBetValue.push(btn_03 - this.currentMeBet);\n                                this.arrBetValue.push(btn_03 + (2 * this.currentRoomBet) - this.currentMeBet);\n                                this.arrBetValue.push(btn_03 + (4 * this.currentRoomBet) - this.currentMeBet);\n\n                                for (let index = 0; index < 5; index++) {\n                                    this.betChooseValue.children[index].children[0].getComponent(cc.Label).string = Utils.formatNumberMin(this.arrBetValue[4 - index]);\n                                }\n\n                                if (roundId == 0) {\n                                    this.betChooseValue.children[0].children[1].getComponent(cc.Label).string = \"\";\n                                    this.betChooseValue.children[1].children[1].getComponent(cc.Label).string = \"\";\n                                    this.betChooseValue.children[2].children[1].getComponent(cc.Label).string = \"3BB\";\n                                    this.betChooseValue.children[3].children[1].getComponent(cc.Label).string = \"2BB\";\n                                    this.betChooseValue.children[4].children[1].getComponent(cc.Label).string = \"MIN\";\n                                } else {\n                                    this.betChooseValue.children[0].children[1].getComponent(cc.Label).string = \"\";\n                                    this.betChooseValue.children[1].children[1].getComponent(cc.Label).string = \"\";\n                                    this.betChooseValue.children[2].children[1].getComponent(cc.Label).string = \"POT\";\n                                    this.betChooseValue.children[3].children[1].getComponent(cc.Label).string = \"POT/2\";\n                                    this.betChooseValue.children[4].children[1].getComponent(cc.Label).string = \"MIN\";\n                                }\n\n                                this.resetBtnActions();\n\n                                if (this.currentMaxBet == this.currentMeBet) {\n                                    this.showBtnCall(false);\n                                    this.showBtnCheck(true);\n                                } else {\n                                    if ((this.currentMaxBet - this.currentMeBet) >= currentMeGold) {\n                                        this.showBtnRaise(false);\n                                        this.showBtnCall(false);\n                                        this.showBtnCheck(false);\n                                    } else {\n                                        this.showBtnCall(true);\n                                        this.showBtnCheck(false);\n                                    }\n                                }\n\n                                if ((this.currentRaiseValue - this.currentMeBet) >= currentMeGold) {\n                                    this.showBtnRaise(false);\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case cmd.Code.KET_THUC:\n                    {\n                        //  cc.log(\"Poker KET_THUC\");\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedEndGame(data);\n                        //  cc.log(\"Poker KET_THUC res : \", JSON.stringify(res));\n\n                        // {\n                        //     \"potAmount\": 1500,\n                        //     \"rankSize\": 9,\n                        //     \"rankList\": [1, 10, 0, 0, 0, 0, 0, 0, 0],\n                        //     \"kqttSize\": 9,\n                        //     \"kqttList\": [1490, 0, 0, 0, 0, 0, 0, 0, 0],\n                        //     \"booleanWinerSize\": 9,\n                        //     \"booleanWinerList\": [1, 0, 0, 0, 0, 0, 0, 0, 0],\n                        //     \"moneyArraySize\": 9,\n                        //     \"currentMoney\": [20490, 19500, 0, 0, 0, 0, 0, 0, 0],\n                        //     \"gameMoney\": [4370306, 6467652, 0, 0, 0, 0, 0, 0, 0],\n                        //     \"gameMoneySize\": 9,\n                        //     \"publicCardSize\": 5,\n                        //     \"publicCards\": [10, 26, 2, 21, 7],\n                        //     \"hasInfoSize\": 9,\n                        //     \"hasInfoList\": [3, 1, 0, 0, 0, 0, 0, 0, 0],\n                        //     \"privateCardList\": [\n                        //         [18, 16], [], [], [], [], [], [], [], []\n                        //     ],\n                        //     \"maxCardList\": [\n                        //         [18, 16, 26, 21, 10],\n                        //         [10, 9, 43, 26, 21],\n                        //         [],\n                        //         [],\n                        //         [],\n                        //         [],\n                        //         [],\n                        //         [],\n                        //         []\n                        //     ],\n                        //     \"cardNameList\": [8, 8, 0, 0, 0, 0, 0, 0, 0]\n                        // }\n\n                        let potAmount = res[\"potAmount\"];\n                        let rankSize = res[\"rankSize\"];\n                        let rankList = res[\"rankList\"];\n                        let kqttSize = res[\"kqttSize\"];\n                        let kqttList = res[\"kqttList\"];\n                        let booleanWinerSize = res[\"booleanWinerSize\"];\n                        let booleanWinerList = res[\"booleanWinerList\"];\n                        let moneyArraySize = res[\"moneyArraySize\"];\n                        let currentMoney = res[\"currentMoney\"];\n                        let gameMoney = res[\"gameMoney\"];\n                        let gameMoneySize = res[\"gameMoneySize\"];\n                        let publicCardSize = res[\"publicCardSize\"];\n                        let publicCards = res[\"publicCards\"];\n                        let hasInfoSize = res[\"hasInfoSize\"];\n                        let hasInfoList = res[\"hasInfoList\"];\n                        let privateCardList = res[\"privateCardList\"];\n                        let maxCardList = res[\"maxCardList\"];\n                        let cardNameList = res[\"cardNameList\"];\n\n                        this.matchPot.active = true;\n                        this.currentMatchPotValue = potAmount;\n                        this.labelMatchPot.string = Utils.formatNumber(potAmount);\n\n                        this.FxDealer.setAnimation(0, \"cho\", true);\n\n                        this.currentPrivateCardList = privateCardList;\n\n                        // show Fx win\n\n                        // find Players is Playing\n                        let arrPlayerPosExist = [];\n                        for (let index = 0; index < cmd.Code.MAX_PLAYER; index++) {\n                            if (maxCardList[index].length > 0) {\n                                arrPlayerPosExist.push(index);\n                            }\n                        }\n\n                        // find Winner\n                        for (let index = 0; index < cmd.Code.MAX_PLAYER; index++) {\n                            if (booleanWinerList[index] == 1) {\n                                // Winner\n                                let seatId = this.findPlayerSeatByPos(index);\n                                if (seatId != -1) {\n                                    this.getPlayerHouse(seatId).fxWin({\n                                        moneyChange: kqttList[index],\n                                        currentMoney: currentMoney[index]\n                                    });\n\n                                    if (seatId == 0) {\n                                        // Me win\n                                        Configs.Login.Coin = gameMoney[index];\n                                        BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\n                                        // numPlayers > 2 thi dc openCard\n                                        let numPlayer = this.getNumPlayers();\n                                        if (numPlayer.length > 2) {\n                                            this.btnOpenCard.active = true;\n                                        } else {\n                                            this.btnOpenCard.active = false;\n                                        }\n\n                                        this.btnBet.active = false;\n                                    }\n                                }\n                            } else {\n                                // Lose : can kiem tra xem co phai isPlaying k\n                                let findId = arrPlayerPosExist.indexOf(index);\n                                if (findId !== -1) {\n                                    let seatId = this.findPlayerSeatByPos(index);\n                                    this.getPlayerHouse(seatId).fxLose({\n                                        moneyChange: kqttList[index],\n                                        currentMoney: currentMoney[index]\n                                    });\n                                    if (seatId == 0) {\n                                        Configs.Login.Coin = gameMoney[index];\n                                        BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\n                                    }\n                                }\n                            }\n                        }\n\n                        // show Center Cards\n                        this.showAllCenterCards(publicCards);\n\n                        // reshow Me cards for reconnect\n\n                        // find Me max cards\n                        let endMeCards = this.currentCard;\n                        let endCenterCards = publicCards;\n                        let endMeMaxCards = maxCardList[configPlayer[0].playerPos];\n\n                        //  cc.log(\"Poker KET_THUC endMeCards : \", endMeCards);\n                        //  cc.log(\"Poker KET_THUC endCenterCards : \", endCenterCards);\n                        //  cc.log(\"Poker KET_THUC endMeMaxCards : \", endMeMaxCards);\n                        if (endMeMaxCards.length > 0) {\n                            for (let index = 0; index < endMeCards.length; index++) {\n                                let findId = endMeMaxCards.indexOf(endMeCards[index]);\n                                if (findId !== -1) {\n                                    this.getPlayerHouse(0).setCardWin(index, true);\n                                } else {\n                                    this.getPlayerHouse(0).setCardWin(index, false);\n                                }\n                            }\n\n                            let arrCardUpper = [];\n                            for (let index = 0; index < endCenterCards.length; index++) {\n                                let findId = endMeMaxCards.indexOf(endCenterCards[index]);\n                                if (findId !== -1) {\n                                    this.cardsCenter.children[index].color = cc.Color.WHITE;\n                                    arrCardUpper.push(index);\n                                } else {\n                                    this.cardsCenter.children[index].color = cc.Color.GRAY;\n                                }\n                            }\n\n                            setTimeout(() => {\n                                for (let index = 0; index < arrCardUpper.length; index++) {\n                                    this.cardsCenter.children[arrCardUpper[index]].y = -10;\n                                }\n                            }, 2500);\n                        }\n\n                        // find card needShow of OtherPlayers\n                        for (let index = 1; index < cmd.Code.MAX_PLAYER; index++) {  // index start from 1\n                            let arrCardsEnd = maxCardList[configPlayer[index].playerPos];\n                            if (arrCardsEnd.length > 0) {\n                                let cardDifferent = [];\n                                for (let a = 0; a < arrCardsEnd.length; a++) {\n                                    let isExist = publicCards.indexOf(arrCardsEnd[a]);\n                                    if (isExist > -1) {\n                                        // Center cards\n                                    } else {\n                                        // Player card\n                                        cardDifferent.push(arrCardsEnd[a]);\n                                    }\n                                }\n\n                                let cardShow = this.currentPrivateCardList[configPlayer[index].playerPos];\n                                for (let a = 0; a < 2; a++) {\n                                    this.getPlayerHouse(index).shadowEachCardReal(a, true);\n                                }\n\n                                if (cardShow.length > 0) {\n                                    for (let a = 0; a < 2; a++) {\n                                        //  cc.log(\"Poker cardId : \", cardShow[a]);\n                                        let spriteCardId = CardUtils.getNormalId(cardShow[a]);\n                                        this.getPlayerHouse(index).prepareToTransform();\n                                        this.getPlayerHouse(index).transformToCardReal(a, this.spriteCards[spriteCardId]);\n                                        if (cardDifferent.length > 0) {\n                                            for (let b = 0; b < cardDifferent.length; b++) {\n                                                if (cardShow[a] == cardDifferent[b]) {\n                                                    this.getPlayerHouse(index).shadowEachCardReal(a, false);\n                                                }\n                                            }\n                                        } else {\n                                            this.getPlayerHouse(index).shadowCardReal(true);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        // show Cards Name\n                        for (let index = 0; index < arrPlayerPosExist.length; index++) {\n                            let cardName = this.getCardsName(cardNameList[arrPlayerPosExist[index]]);\n                            let seatId = this.findPlayerSeatByPos(arrPlayerPosExist[index]);\n                            if (seatId != -1) {\n                                if (seatId == 0) {\n                                    this.getPlayerHouse(seatId).hideCardName();\n                                    this.FxMeCardName.active = true;\n                                    this.FxMeCardName.children[0].getComponent(cc.Sprite).spriteFrame = this.spriteCardNames[cardNameList[arrPlayerPosExist[index]]];\n                                } else {\n                                    this.getPlayerHouse(seatId).showCardName(cardName);\n                                }\n\n                            }\n                        }\n                    }\n                    break;\n                case cmd.Code.UPDATE_MATCH:\n                    {\n                        //  cc.log(\"Poker UPDATE_MATCH\");\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedUpdateMatch(data);\n                        //  cc.log(\"Poker UPDATE_MATCH res : \", JSON.stringify(res));\n\n                        // {\n                        //     \"chair\": 1,\n                        //     \"hasInfoSize\": 9,\n                        //     \"hasInfoList\": [1, 1, 0, 0, 0, 0, 0, 0, 0],\n                        //     \"currentMoneyList\": [19990, 19990, 0, 0, 0, 0, 0, 0, 0],\n                        //     \"statusList\": [2, 2, 0, 0, 0, 0, 0, 0, 0]\n                        // }\n\n                        let chair = res[\"chair\"];\n                        let hasInfoSize = res[\"hasInfoSize\"];\n                        let hasInfoList = res[\"hasInfoList\"];\n                        let currentMoneyList = res[\"currentMoneyList\"];\n                        let statusList = res[\"statusList\"];\n\n                        //  cc.log(\"Poker setupMatch configPlayer : \", configPlayer);\n                        // theo Pos khong phai SeatId\n                        for (let index = 0; index < cmd.Code.MAX_PLAYER; index++) {\n                            let pos = configPlayer[index][\"playerPos\"];\n                            if (hasInfoList[pos] == 1) {\n                                // setGold se inactive isViewer nen dat no len dau de ben duoi config lai\n                                this.getPlayerHouse(index).setGold(currentMoneyList[pos]);\n                                if (statusList[pos] == cmd.Code.PLAYER_STATUS_SITTING || statusList[pos] == cmd.Code.PLAYER_STATUS_PLAYING) {\n                                    if (currentMoneyList[pos] == 0) {\n                                        configPlayer[index].isViewer = true;\n                                        configPlayer[index][\"isViewer\"] = true;\n                                        this.getPlayerHouse(index).setIsViewer(true);\n                                        if (configPlayer[index].playerId != -1) {\n                                            this.getPlayerHouse(index).playFxViewer();\n                                        }\n                                    } else {\n                                        configPlayer[index].isViewer = false;\n                                        configPlayer[index][\"isViewer\"] = false;\n                                        this.getPlayerHouse(index).setIsViewer(false);\n                                    }\n                                } else {\n                                    configPlayer[index].isViewer = true;\n                                    configPlayer[index][\"isViewer\"] = true;\n                                    this.getPlayerHouse(index).setIsViewer(true);\n                                    if (configPlayer[index].playerId != -1) {\n                                        this.getPlayerHouse(index).playFxViewer();\n                                    }\n\n                                }\n                            } else {\n                                configPlayer[index][\"playerId\"] = -1;\n                                configPlayer[index][\"isViewer\"] = true;\n                            }\n                        }\n                        //  cc.log(\"Poker setupMatch configPlayer : \", configPlayer);\n                    }\n                    break;\n                case cmd.Code.SHOW_CARD:\n                    {\n                        //  cc.log(\"Poker SHOW_CARD\");\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedShowCard(data);\n                        //  cc.log(\"Poker SHOW_CARD res : \", JSON.stringify(res));\n\n                        let chair = res[\"chair\"];\n\n                        let seatId = this.findPlayerSeatByPos(chair);\n                        if (seatId != -1) {\n                            let cardShow = this.currentPrivateCardList[chair];\n                            if (cardShow.length > 0) {\n                                for (let a = 0; a < 2; a++) {\n                                    //  cc.log(\"Poker cardId : \", cardShow[a]);\n                                    let spriteCardId = CardUtils.getNormalId(cardShow[a]);\n                                    this.getPlayerHouse(seatId).prepareToTransform();\n                                    this.getPlayerHouse(seatId).transformToCardReal(a, this.spriteCards[spriteCardId]);\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case cmd.Code.REQUEST_BUY_IN:\n                    {\n                        //  cc.log(\"Poker REQUEST_STAND_UP\");\n                        if (Configs.Login.Coin >= (this.currentRoomBet * this.roomMinBuyIn)) {\n                            this.showPopupBuyIn(this.roomMinBuyIn, this.roomMaxBuyIn, this.currentRoomBet);\n                        } else {\n                            this.actionLeaveRoom();\n                        }\n                    }\n                    break;\n                case cmd.Code.REQUEST_STAND_UP:\n                    {\n                        //  cc.log(\"Poker REQUEST_STAND_UP\");\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedStandUp(data);\n                        //  cc.log(\"Poker REQUEST_STAND_UP res : \", JSON.stringify(res));\n                        let isUp = res[\"isUp\"];\n\n                        //  cc.log(\"Poker REQUEST_STAND_UP isUp : \", isUp);\n                    }\n                    break;\n\n\n\n                case cmd.Code.LOGIN:\n                    App.instance.showLoading(false);\n                    this.refeshListRoom();\n                    PokerNetworkClient.getInstance().send(new cmd.CmdReconnectRoom());\n                    break;\n                case cmd.Code.TOPSERVER:\n                    {\n                        App.instance.showLoading(false);\n                        //  cc.log(\"Poker TOPSERVER\");\n                    }\n                    break;\n                case cmd.Code.CMD_PINGPONG:\n                    {\n                        App.instance.showLoading(false);\n                        //  cc.log(\"Poker CMD_PINGPONG\");\n                    }\n                    break;\n                case cmd.Code.CMD_JOIN_ROOM:\n                    {\n                        App.instance.showLoading(false);\n                        //  cc.log(\"Poker CMD_JOIN_ROOM\");\n                    }\n                    break;\n                case cmd.Code.CMD_RECONNECT_ROOM:\n                    {\n                        App.instance.showLoading(false);\n                        //  cc.log(\"Poker CMD_RECONNECT_ROOM\");\n                    }\n                    break;\n                case cmd.Code.CMD_RECONNECT_ROOM:\n                    {\n                        App.instance.showLoading(false);\n                        //  cc.log(\"Poker CMD_RECONNECT_ROOM\");\n                    }\n                    break;\n                case cmd.Code.MONEY_BET_CONFIG:\n                    {\n                        App.instance.showLoading(false);\n                        //  cc.log(\"Poker MONEY_BET_CONFIG\");\n                    }\n                    break;\n                case cmd.Code.JOIN_ROOM_FAIL:\n                    {\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedJoinRoomFail(data);\n                        //  cc.log(\"Poker JOIN_ROOM_FAIL res : \", JSON.stringify(res));\n                        let msg = \"Lỗi \" + res.getError() + \", không xác định.\";\n                        switch (res.getError()) {\n                            case 1:\n                                msg = \"Lỗi kiểm tra thông tin!\";\n                                break;\n                            case 2:\n                                msg = \"Không tìm được phòng thích hợp. Vui lòng thử lại sau!\";\n                                break;\n                            case 3:\n                                msg = \"Bạn không đủ tiền vào phòng chơi này!\";\n                                break;\n                            case 4:\n                                msg = \"Không tìm được phòng thích hợp. Vui lòng thử lại sau!\";\n                                break;\n                            case 5:\n                                msg = \"Mỗi lần vào phòng phải cách nhau 10 giây!\";\n                                break;\n                            case 6:\n                                msg = \"Hệ thống bảo trì!\";\n                                break;\n                            case 7:\n                                msg = \"Không tìm thấy phòng chơi!\";\n                                break;\n                            case 8:\n                                msg = \"Mật khẩu phòng chơi không đúng!\";\n                                break;\n                            case 9:\n                                msg = \"Phòng chơi đã đủ người!\";\n                                break;\n                            case 10:\n                                msg = \"Bạn bị chủ phòng không cho vào bàn!\"\n                        }\n                        App.instance.alertDialog.showMsg(msg);\n                    }\n                    break;\n                case cmd.Code.GET_LIST_ROOM:\n                    {\n                        let res = new cmd.ReceivedGetListRoom(data);\n                        //  cc.log(res);\n                        for (let i = 0; i < res.list.length; i++) {\n                            let itemData = res.list[i];\n                            let item = cc.instantiate(this.prefabItemRoom);\n                            item.getComponent(\"Poker.ItemRoom\").initItem(itemData);\n                            this.contentListRooms.addChild(item);\n                        }\n                        this.scrollListRoom.scrollToTop(0.2);\n                    }\n                    break;\n                case cmd.Code.JOIN_GAME_ROOM_BY_ID:\n                    {\n                        App.instance.showLoading(false);\n                        //  cc.log(\"Poker JOIN_GAME_ROOM_BY_ID\");\n                    }\n                    break;\n\n\n                case cmd.Code.TU_DONG_BAT_DAU:\n                    {\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedAutoStart(data);\n                        //  cc.log(\"Poker ReceiveAutoStart res : \", JSON.stringify(res));\n                        // {\n                        //     \"isAutoStart\": true,\n                        //     \"timeAutoStart\": 5\n                        // }\n                        this.FxMeCardName.active = false;\n                        this.isFolded = false;\n                        if (res.isAutoStart) {\n                            this.resetCenterCards();\n                            this.resetHubChips();\n                            this.startWaittingCountDown(res.timeAutoStart);\n                            this.btnBet.active = false;\n                            this.btnOpenCard.active = false;\n                            this.FxDealer.setAnimation(0, \"cho\", true);\n\n                            this.matchPot.active = false;\n                            this.labelMatchPot.string = \"0\";\n                            this.currentMatchPotValue = 0;\n\n                            this.currentCard = [];\n                            this.currentCenterCard = [];\n                            this.currentPrivateCardList = [];\n\n\n                            this.currentMeBet = 0;\n                            this.lastMeBet = 0;\n\n                            this.currentMaxBet = 0;\n                            this.currentRaiseMin = 0;\n                            this.currentRaiseStep = 0;\n                            this.currentRaiseValue = 0;\n\n                            this.resetPlayersPlaying();\n                            this.FxDealer.setAnimation(0, \"cho\", true);\n                        }\n                    }\n                    break;\n                case cmd.Code.MOI_DAT_CUOC:\n                    {\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedMoiDatCuoc(data);\n                        //  cc.log(\"Poker ReceivedMoiDatCuoc res : \", JSON.stringify(res));\n                        // {\n                        //     \"timeDatCuoc\": 20\n                        //   }\n                        this.startBettingCountDown(res.timeDatCuoc);\n                        this.arrBetValue = [];\n                        this.matchPot.active = true;\n                        this.currentMatchPotValue = 0;\n                        this.labelMatchPot.string = \"0\";\n\n                        for (let index = 0; index < 4; index++) {\n                            this.arrBetValue.push(this.currentRoomBet * (index + 1));\n                            this.betChooseValue.children[index].children[0].getComponent(cc.Label).string = Utils.formatNumberMin(this.currentRoomBet * (4 - index));\n                        }\n\n                        // set bet default\n                        for (let index = 0; index < configPlayer.length; index++) {\n                            if (index !== this.seatOwner\n                                && !configPlayer[index].isViewer\n                                && configPlayer[index].playerId !== -1) {\n                                //  cc.log(\"Poker ReceivedMoiDatCuoc index : \", index);\n                                this.getPlayerHouse(index).setBet(this.currentRoomBet);\n                                this.getPlayerHouse(index).addChips();\n                                if (index != 0) { // k ke cua, danh bien duoc len chinh minh\n                                    this.getPlayerHouse(index).setupBetValue(this.currentRoomBet);\n                                }\n                            }\n                        }\n\n                        // {\n                        //     seatId: 0,\n                        //     playerId: -1,\n                        //     playerPos: -1,\n                        //     isViewer: true\n                        // }\n\n                        if (this.seatOwner == 0) { // Me la Chuong -> K dc bet va k dc vao ga\n                            this.btnOpenCard.active = false;\n                            this.btnBet.active = false;\n                            this.FxDealer.setAnimation(0, \"cho\", true);\n                        } else {\n                            this.btnBet.active = true;\n                            this.btnOpenCard.active = false;\n                            this.FxDealer.setAnimation(0, \"noti\", true);\n                            this.setupBet();\n                            //  cc.log(\"Poker MOI_DAT_CUOC this.arrBetValue : \", this.arrBetValue);\n                        }\n\n                        this.numCardOpened = 0;\n                    }\n                    break;\n                case cmd.Code.CHEAT_CARDS:\n                    {\n                        App.instance.showLoading(false);\n                        //  cc.log(\"Poker CHEAT_CARDS\");\n                    }\n                    break;\n                case cmd.Code.DANG_KY_CHOI_TIEP:\n                    {\n                        App.instance.showLoading(false);\n                        //  cc.log(\"Poker DANG_KY_CHOI_TIEP\");\n                    }\n                    break;\n                case cmd.Code.UPDATE_OWNER_ROOM:\n                    {\n                        App.instance.showLoading(false);\n                        //  cc.log(\"Poker UPDATE_OWNER_ROOM\");\n                    }\n                    break;\n                case cmd.Code.NOTIFY_KICK_FROM_ROOM:\n                    {\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedKickOff(data);\n                        //  cc.log(\"Poker ReceivedKickOff res : \", JSON.stringify(res));\n                    }\n                    break;\n                case cmd.Code.NOTIFY_USER_GET_JACKPOT:\n                    {\n                        App.instance.showLoading(false);\n                        //  cc.log(\"Poker NOTIFY_USER_GET_JACKPOT\");\n                    }\n                    break;\n                case cmd.Code.CHAT_ROOM:\n                    {\n                        App.instance.showLoading(false);\n                        let res = new cmd.ReceivedChatRoom(data);\n                        //  cc.log(\"Poker CHAT_ROOM res : \", JSON.stringify(res));\n\n                        // {\n                        //     \"chair\": 0,\n                        //     \"isIcon\": true,\n                        //     \"content\": \"6\",\n                        //     \"nickname\": \"chaoae99\"\n                        //   }\n\n                        // {\n                        //     \"chair\": 0,\n                        //     \"isIcon\": false,\n                        //     \"content\": \"lalal\",\n                        //     \"nickname\": \"chaoae99\"\n                        //   }\n\n                        let chair = res[\"chair\"];\n                        let isIcon = res[\"isIcon\"];\n                        let content = res[\"content\"];\n                        if (isIcon) {\n                            // Chat Icon\n                            let seatId = this.findPlayerSeatByPos(chair);\n                            if (seatId != -1) {\n                                this.getPlayerHouse(seatId).showChatEmotion(content);\n                            }\n                        } else {\n                            // Chat Msg\n                            let seatId = this.findPlayerSeatByPos(chair);\n                            if (seatId != -1) {\n                                this.getPlayerHouse(seatId).showChatMsg(content);\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    //  cc.log(\"Poker Unknown --inpacket.getCmdId(): \" + inpacket.getCmdId());\n                    break;\n            }\n        }, this);\n    }\n\n    // request\n    actionLeaveRoom() {\n        //  cc.log(\"Poker actionLeaveRoom\");\n        PokerNetworkClient.getInstance().send(new cmd.CmdSendRequestLeaveGame());\n    }\n\n    actionOpenCard() {\n        //  cc.log(\"Poker actionOpenCard\");\n        PokerNetworkClient.getInstance().send(new cmd.SendShowCard());\n        this.btnOpenCard.active = false;\n    }\n\n    actionSendVaoGa() {\n        //  cc.log(\"Poker actionSendVaoGa\");\n\n    }\n\n    increaseBetValue() {\n        if (this.currentBetSelectedIndex == (this.arrBetValue.length - 1)) {\n\n        } else {\n            this.currentBetSelectedIndex += 1;\n        }\n\n        this.betChooseValueTarget.y = this.arrBetPos[this.currentBetSelectedIndex];\n    }\n\n    decreaseBetValue() {\n        if (this.currentBetSelectedIndex == 0) {\n\n        } else {\n            this.currentBetSelectedIndex -= 1;\n        }\n\n        this.betChooseValueTarget.y = this.arrBetPos[this.currentBetSelectedIndex];\n    }\n\n    actionAll_In() {\n        //  cc.log(\"Poker actionAll_In\");\n        this.btnBet.active = false;\n        PokerNetworkClient.getInstance().send(new cmd.SendTakeTurn(0, 0, 0, 1, 0));\n    }\n\n    actionRaise() {\n        //  cc.log(\"Poker actionRaise\");\n        this.btnBet.active = false;\n        this.FxDealer.setAnimation(0, \"cho\", true);\n        let rawMeGold = this.getPlayerHouse(0).userGold.string.replace(/\\./g, \"\");\n        let currentMeMoney = parseInt(rawMeGold);\n        //  cc.log(\"Poker actionRaise currentMeMoney : \", currentMeMoney);\n        //  cc.log(\"Poker actionRaise arrBetValue : \", this.arrBetValue);\n        //  cc.log(\"Poker actionRaise currentBetSelectedIndex : \", this.currentBetSelectedIndex);\n        let betValue = Math.min(this.arrBetValue[this.currentBetSelectedIndex], currentMeMoney);\n        // let betValue = Math.min(this.currentRaiseValue - this.currentMeBet, currentMeMoney);\n        //  cc.log(\"Poker actionRaise betValue : \", betValue);\n        PokerNetworkClient.getInstance().send(new cmd.SendTakeTurn(0, 0, 0, 0, betValue));\n    }\n\n    actionCheck() {\n        //  cc.log(\"Poker actionCheck\");\n        this.btnBet.active = false;\n        this.FxDealer.setAnimation(0, \"cho\", true);\n        PokerNetworkClient.getInstance().send(new cmd.SendTakeTurn(0, 1, 0, 0, 0));\n\n    }\n\n    actionCall() {\n        //  cc.log(\"Poker actionCall\");\n        this.btnBet.active = false;\n        this.FxDealer.setAnimation(0, \"cho\", true);\n        PokerNetworkClient.getInstance().send(new cmd.SendTakeTurn(0, 0, 1, 0, 0));\n\n    }\n\n    actionFold() {\n        //  cc.log(\"Poker actionFold\");\n        this.btnBet.active = false;\n        this.FxDealer.setAnimation(0, \"cho\", true);\n        PokerNetworkClient.getInstance().send(new cmd.SendTakeTurn(1, 0, 0, 0, 0));\n    }\n\n    actionBuyIn() {\n        //  cc.log(\"Poker actionBuyIn\");\n        //  cc.log(\"Poker input : \", this.edtBuyIn.string);\n        let event = this.edtBuyIn.string;\n        if (event.length > 0) {\n            var rawNumber = \"\";\n            for (let index = 0; index < event.length; index++) {\n                if (event[index] == \"0\"\n                    || event[index] == \"1\"\n                    || event[index] == \"2\"\n                    || event[index] == \"3\"\n                    || event[index] == \"4\"\n                    || event[index] == \"5\"\n                    || event[index] == \"6\"\n                    || event[index] == \"7\"\n                    || event[index] == \"8\"\n                    || event[index] == \"9\") {\n                    rawNumber += event[index];\n                }\n            }\n            //  cc.log(\"Poker actionBuyIn rawNumber : \", rawNumber);\n            if (rawNumber !== \"\") {\n                if (Configs.Login.Coin < this.maxCashIn) {\n                    this.maxCashIn = Configs.Login.Coin;\n                }\n\n                if (parseInt(rawNumber) < this.minCashIn * this.currentRoomBet) {\n                    App.instance.alertDialog.showMsg(\"Số tiền Buy In phải lớn hơn \" + Utils.formatNumber(this.minCashIn * this.currentRoomBet));\n                    return;\n                }\n\n                if (parseInt(rawNumber) > this.maxCashIn * this.currentRoomBet) {\n                    App.instance.alertDialog.showMsg(\"Số tiền Buy In phải nhỏ hơn \" + Utils.formatNumber(this.maxCashIn * this.currentRoomBet));\n                    return;\n                }\n                //  cc.log(\"Poker actionBuyIn Cash In : \", parseInt(rawNumber));\n                if (this.toggleAutoBuyIn.isChecked) {\n                    PokerNetworkClient.getInstance().send(new cmd.SendBuyIn(parseInt(rawNumber), 1));\n                } else {\n                    PokerNetworkClient.getInstance().send(new cmd.SendBuyIn(parseInt(rawNumber), 0));\n                }\n                App.instance.showLoading(true);\n                this.closePopupBuyIn();\n            } else {\n                App.instance.alertDialog.showMsg(\"Số tiền không hợp lệ.\");\n            }\n        }\n    }\n\n    // State\n    initConfigPlayer() {\n        configPlayer = [];\n        for (let index = 0; index < cmd.Code.MAX_PLAYER; index++) {\n            configPlayer.push({\n                seatId: index,\n                playerId: -1,\n                playerPos: -1,\n                isViewer: true\n            });\n        }\n        //  cc.log(\"Poker configPlayer : \", configPlayer);\n    }\n\n    resetCenterCards() {\n        for (let index = 0; index < 5; index++) {\n            this.cardsCenter.children[index].position = cc.v2(0, 100);\n            this.cardsCenter.children[index].scale = 0;\n            this.cardsCenter.children[index].color = cc.Color.WHITE;\n        }\n    }\n\n    resetPlayersPlaying() {\n        for (let index = 0; index < cmd.Code.MAX_PLAYER; index++) {\n            this.getPlayerHouse(index).resetMatchHistory();\n        }\n    }\n\n    resetAllPlayerCountdown() {\n        for (let index = 0; index < cmd.Code.MAX_PLAYER; index++) {\n            this.getPlayerHouse(index).hidePlayCountdown();\n        }\n    }\n\n    // handle Game Players\n    getCardsName(boBaiId) {\n        let name = \"\";\n        switch (boBaiId) {\n            case cmd.Code.EG_SANH_VUA:\n                name = \"Sảnh Vua\";\n                break;\n            case cmd.Code.EG_THUNG_PHA_SANH:\n                name = \"Thùng Phá Sảnh\";\n                break;\n            case cmd.Code.EG_TU_QUY:\n                name = \"Tứ Quý\";\n                break;\n            case cmd.Code.EG_CU_LU:\n                name = \"Cù Lũ\";\n                break;\n            case cmd.Code.EG_THUNG:\n                name = \"Thùng\";\n                break;\n            case cmd.Code.EG_SANH:\n                name = \"Sảnh\";\n                break;\n            case cmd.Code.EG_XAM_CO:\n                name = \"Xám Cô\";\n                break;\n            case cmd.Code.EG_HAI_DOI:\n                name = \"Hai Đôi\";\n                break;\n            case cmd.Code.EG_DOI:\n                name = \"Đôi\";\n                break;\n            case cmd.Code.EG_MAU_THAU:\n                name = \"Mậu Thầu\";\n                break;\n            default:\n                break;\n        }\n        return name;\n    }\n\n    setupSeatPlayer(seatId, playerInfo) {\n        //  cc.log(\"Poker setupSeatPlayer playerInfo : \", playerInfo);\n        configPlayer[seatId].playerId = playerInfo.nickName;\n        this.getPlayerHouse(seatId).setAvatar(playerInfo.avatar);\n        this.getPlayerHouse(seatId).setName(playerInfo.nickName);\n        this.getPlayerHouse(seatId).setGold(playerInfo.currentMoney);\n    }\n\n    findPlayerSeatByUid(uid) {\n        let seat = -1;\n        for (let index = 0; index < configPlayer.length; index++) {\n            if (configPlayer[index].playerId === uid) {\n                seat = configPlayer[index].seatId;\n            }\n        }\n        return seat;\n    }\n\n    findPlayerPosBySeat(seat) {\n        return configPlayer[seat].playerPos;\n    }\n\n    findPlayerSeatByPos(pos) {\n        if (pos == -1) {\n            return -1;\n        }\n\n        let seat = -1;\n        for (let index = 0; index < configPlayer.length; index++) {\n            if (configPlayer[index].playerPos === pos) {\n                seat = configPlayer[index].seatId;\n            }\n        }\n        return seat;\n    }\n\n    getPlayerHouse(seatId) {\n        return this.groupPlayers.children[seatId].getComponent(\"Poker.Player\");\n    }\n\n    getNumPlayers() {\n        //  cc.log(\"playerPosEntry configPlayer : \", configPlayer);\n        var playerPosEntry = [];\n        for (let index = 0; index < configPlayer.length; index++) {\n            //  cc.log(\"playerPosEntry playerId : \", configPlayer[index].playerId);\n            //  cc.log(\"playerPosEntry isViewer : \", configPlayer[index].isViewer);\n            //  cc.log(\"-------------------------------------\");\n            if (configPlayer[index].playerId !== -1 && !configPlayer[index].isViewer) {\n                playerPosEntry.push(configPlayer[index].seatId);\n                //  cc.log(\"playerPosEntry seatId : \", configPlayer[index].seatId);\n            }\n        }\n        //  cc.log(\"playerPosEntry : \", playerPosEntry);\n        return playerPosEntry;\n    }\n\n    update(dt) {\n\n    }\n}\n\n"]}