{"version":3,"sources":["assets\\Lobby\\LobbyScript\\Script\\common\\CanvasResizer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEM,IAAA,KAA0C,EAAE,CAAC,UAAU,EAArD,OAAO,aAAA,EAAE,QAAQ,cAAA,EAAE,gBAAgB,sBAAkB,CAAC;AAI9D;IAA2C,iCAAY;IAAvD;QAAA,qEA4CC;QAzCG,sBAAgB,GAAY,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAEnD,eAAS,GAAW,CAAC,CAAC;QACtB,gBAAU,GAAW,CAAC,CAAC;;IAsC3B,CAAC;IAnCG,8BAAM,GAAN;QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;QAChD,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAA;QAC/C,IAAI,IAAI,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;YAClB,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;YACpC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC;SACvC;aAAM;YACH,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC;YACrC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;SACtC;IACL,CAAC;IAED,8BAAM,GAAN,UAAO,EAAE;QACL,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAED,oCAAY,GAAZ;QACI,IAAI,SAAS,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;QACvC,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,CAAC,MAAM,EAAE;YAE5E,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC;YACjC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC;YAEnC,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC,MAAM,EAAE;gBACjG,IAAI,aAAa,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7H,IAAI,CAAC,MAAM,CAAC,gBAAgB,GAAG,aAAa,CAAC;gBAC5C,oDAAoD;aACxD;iBAAM;gBACH,IAAI,aAAa,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;gBAC/H,IAAI,CAAC,MAAM,CAAC,gBAAgB,GAAG,aAAa,CAAC;gBAC5C,oDAAoD;aACxD;SACJ;IACL,CAAC;IAxCD;QADC,QAAQ;2DAC0C;IAHlC,aAAa;QAFjC,OAAO;QACP,gBAAgB,CAAC,EAAE,CAAC,MAAM,CAAC;OACP,aAAa,CA4CjC;IAAD,oBAAC;CA5CD,AA4CC,CA5C0C,EAAE,CAAC,SAAS,GA4CtD;kBA5CoB,aAAa","file":"","sourceRoot":"/","sourcesContent":["import Utils from \"./Utils\";\n\nconst { ccclass, property, requireComponent } = cc._decorator;\n\n@ccclass\n@requireComponent(cc.Canvas)\nexport default class CanvasResizer extends cc.Component {\n\n    @property\n    designResolution: cc.Size = new cc.Size(1560, 720);\n\n    lastWitdh: number = 0;\n    lastHeight: number = 0;\n    canvas: cc.Canvas;\n\n    onLoad() {\n        this.canvas = this.node.getComponent(cc.Canvas);\n        this.updateCanvas();\n        let tile = cc.winSize.width / cc.winSize.height\n        if (tile >= (16 / 9)) {\n            cc.Canvas.instance.fitHeight = true;\n            cc.Canvas.instance.fitWidth = false;\n        } else {\n            cc.Canvas.instance.fitHeight = false;\n            cc.Canvas.instance.fitWidth = true;\n        }\n    }\n\n    update(dt) {\n        this.updateCanvas();\n    }\n\n    updateCanvas() {\n        var frameSize = cc.view.getFrameSize();\n        if (this.lastWitdh !== frameSize.width || this.lastHeight !== frameSize.height) {\n\n            this.lastWitdh = frameSize.width;\n            this.lastHeight = frameSize.height;\n\n            if (this.designResolution.width / this.designResolution.height > frameSize.width / frameSize.height) {\n                var newDesignSize = cc.size(this.designResolution.width, this.designResolution.width * (frameSize.height / frameSize.width));\n                this.canvas.designResolution = newDesignSize;\n                 //Utils.Log(\"update canvas size: \" + newDesignSize);\n            } else {\n                var newDesignSize = cc.size(this.designResolution.height * (frameSize.width / frameSize.height), this.designResolution.height);\n                this.canvas.designResolution = newDesignSize;\n                 //Utils.Log(\"update canvas size: \" + newDesignSize);\n            }\n        }\n    }\n}\n"]}