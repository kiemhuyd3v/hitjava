{"version":3,"sources":["assets\\Lobby\\LobbyScript\\Script\\networks\\Network.NetworkClient.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Utils from \"../common/Utils\";\nimport NetworkListener from \"./Network.NetworkListener\";\n\nexport default class NetworkClient {\n    ws: WebSocket = null;\n    host: string = \"\";\n    port: number = 0;\n    isForceClose = false;\n    isUseWSS: boolean = false;\n    isAutoReconnect: boolean = true;\n    retryCount = 0;\n\n    _onOpenes: Array<NetworkListener> = [];\n    _onCloses: Array<NetworkListener> = [];\n\n    connect(host: string, port: number) {\n        //  //Utils.Log(\"start connect: \" + host + \":\" + port + \" =>\" + cc.url.raw(\"resources/raw/cacert.pem\"));\n        this.isForceClose = false;\n        this.host = host;\n        this.port = port;\n        if (this.ws == null) {\n\n            if (cc.sys.isBrowser) {\n                this.ws = new WebSocket(\"wss://\" + host + \":\" + port + \"/websocket\");\n            } else {\n                if (cc.sys.isNative && cc.sys.os == cc.sys.OS_ANDROID) {\n                    this.ws = new WebSocket(\"wss://\" + host + \":\" + port + \"/websocket\", [], cc.url.raw(\"resources/raw/cacert.pem\"));\n                    this.ws.binaryType = \"arraybuffer\";\n                } else {\n                    this.ws = new WebSocket(\"wss://\" + host + \":\" + port + \"/websocket\");\n                }\n            }\n            this.ws.binaryType = \"arraybuffer\";\n            this.ws.onopen = this.onOpen.bind(this);\n            this.ws.onmessage = this.onMessage.bind(this);\n            this.ws.onerror = this.onError.bind(this);\n            this.ws.onclose = this.onClose.bind(this);\n\n        } else {\n            if (this.ws.readyState !== WebSocket.OPEN) {\n                this.ws.close();\n                this.ws = null;\n                this.connect(host, port);\n            }\n        }\n    }\n\n    protected onOpen(ev: Event) {\n         //Utils.Log(\"onOpen\");\n        this.retryCount = 0;\n        for (var i = 0; i < this._onOpenes.length; i++) {\n            var listener = this._onOpenes[i];\n            if (listener.target && listener.target instanceof Object && listener.target.node) {\n                listener.callback(null);\n            } else {\n                this._onOpenes.splice(i, 1);\n                i--;\n            }\n        }\n    }\n\n    protected onMessage(ev: MessageEvent) {\n        //  //Utils.Log(\"onmessage: \" + ev.data);\n    }\n\n    protected onError(ev: Event) {\n         //Utils.Log(\"onError\");\n    }\n\n    protected onClose(ev: Event) {\n         //Utils.Log(\"onClose\");\n        for (var i = 0; i < this._onCloses.length; i++) {\n            var listener = this._onCloses[i];\n            if (listener.target && listener.target instanceof Object && listener.target.node) {\n                listener.callback(null);\n            } else {\n                this._onCloses.splice(i, 1);\n                i--;\n            }\n        }\n        if (this.isAutoReconnect && !this.isForceClose) {\n            setTimeout(() => {\n                if (!this.isForceClose) this.connect(this.host, this.port);\n            }, 2000);\n        }\n    }\n\n    addOnOpen(callback: () => void, target: cc.Component) {\n        this._onOpenes.push(new NetworkListener(target, callback));\n    }\n\n    addOnClose(callback: () => void, target: cc.Component) {\n        this._onCloses.push(new NetworkListener(target, callback));\n    }\n\n    close() {\n        this.isForceClose = true;\n        if (this.ws) {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n\n    isConnected() {\n        if (this.ws) {\n            return this.ws.readyState == WebSocket.OPEN;\n        }\n        return false;\n    }\n}"]}