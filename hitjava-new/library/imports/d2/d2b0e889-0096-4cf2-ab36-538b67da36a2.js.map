{"version":3,"sources":["assets\\Lobby\\LobbyScript\\Script\\networks\\MiniGameNetworkClient2.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import NetworkClient from \"./Network.NetworkClient\";\nimport OutPacket from \"./Network.OutPacket\";\nimport NetworkListener from \"./Network.NetworkListener\";\nimport InPacket from \"./Network.InPacket\";\nimport cmd from \"./Network.Cmd\";\nimport App from \"../common/App\";\nimport Configs from \"../../../../Loading/src/Configs\";\nimport Utils from \"../common/Utils\";\n\nexport default class MiniGameNetworkClient2 extends NetworkClient {\n    private static instance: MiniGameNetworkClient2;\n\n    private listeners: Array<NetworkListener> = new Array<NetworkListener>();\n    private isLogin = false;\n    private onLogined: () => void = null;\n\n    private intervalPing: number = -1;\n\n    public static getInstance(): MiniGameNetworkClient2 {\n        if (this.instance == null) {\n            this.instance = new MiniGameNetworkClient2();\n        }\n        return this.instance;\n    }\n\n    constructor() {\n        super();\n        this.isUseWSS = Configs.App.USE_WSS;\n    }\n\n    public checkConnect(onLogined: () => void = null) {\n         //Utils.Log(\"checkConnect MiniGame\");\n        this.onLogined = onLogined;\n        if (this.ws != null && this.ws.readyState == WebSocket.CONNECTING) return;\n        if (!this.isConnected()) {\n            // App.instance.showErrLoading(\"Đang vào game...\");\n            this.connect();\n            return;\n        }\n        if (this.isLogin && this.onLogined != null) this.onLogined();\n    }\n\n    protected onError(ev: Event) {\n        App.instance.showLoading(false);\n         //Utils.Log(\"onError minigame:\" + JSON.stringify(ev));\n    }\n\n    connect() {\n        super.connect(Configs.App.HOST_MINIGAME2.host, Configs.App.HOST_MINIGAME2.port);\n         //Utils.Log(\"Port Mini Game:\"+ Configs.App.HOST_MINIGAME2.port);\n    }\n\n    protected onOpen(ev: Event) {\n        super.onOpen(ev);\n        this.send(new cmd.SendLogin(Configs.Login.Nickname, Configs.Login.AccessToken));\n         //Utils.Log(\"minigame connected:\"+Configs.Login.AccessToken);\n        App.instance.showLoading(false);\n        this.intervalPing = setInterval(() => this.ping(), 1);\n        this.ping();\n    }\n\n    protected onMessage(ev: MessageEvent) {\n        var data = new Uint8Array(ev.data);\n        for (var i = 0; i < this.listeners.length; i++) {\n            var listener = this.listeners[i];\n            if (listener.target && listener.target instanceof Object && listener.target.node) {\n                listener.callback(data);\n            } else {\n                this.listeners.splice(i, 1);\n                i--;\n            }\n        }\n\n        let inpacket = new InPacket(data);\n        switch (inpacket.getCmdId()) {\n            case cmd.Code.LOGIN:\n                this.isLogin = true;\n                if (this.onLogined != null) {\n                     //Utils.Log(\"Logined\");\n                    this.onLogined();\n                }\n                break;\n        }\n    }\n\n    public addListener(callback: (data: Uint8Array) => void, target: cc.Component) {\n        this.listeners.push(new NetworkListener(target, callback));\n    }\n\n    protected onClose(ev: Event) {\n         //Utils.Log(\"onclose minigame\");\n        super.onClose(ev);\n    }\n\n    public send(packet: OutPacket) {\n        for (var b = new Int8Array(packet._length), c = 0; c < packet._length; c++)\n            b[c] = packet._data[c];\n        if (this.ws != null && this.isConnected())\n            this.ws.send(b.buffer);\n    }\n\n    public sendCheck(packet: OutPacket) {\n        this.checkConnect(() => {\n            this.send(packet);\n        });\n    }\n    public ping() {\n        if (this.ws != null && this.ws.readyState !== WebSocket.OPEN) {\n            //  //Utils.Log(\"WebSocket minigame instance wasn't ready...\");\n        };\n    }\n}\n"]}