
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Lobby/LobbyScript/Script/networks/PacketHeaderAnalyze.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '20c46EIfchK67TjWzmS1EFh', 'PacketHeaderAnalyze');
// Lobby/LobbyScript/Script/networks/PacketHeaderAnalyze.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Network;
(function (Network) {
    var PacketHeaderAnalyze = /** @class */ (function () {
        function PacketHeaderAnalyze() {
        }
        PacketHeaderAnalyze.getDataSize = function (a) {
            return this.isBigSize(a) ? this.getIntAt(a, this.BYTE_PACKET_SIZE_INDEX) : this.getUnsignedShortAt(a, this.BYTE_PACKET_SIZE_INDEX);
        };
        PacketHeaderAnalyze.getCmdIdFromData = function (a) {
            return this.getShortAt(a, 1);
        };
        PacketHeaderAnalyze.isBigSize = function (a) {
            return this.getBit(a[0], this.BIT_IS_BIG_SIZE_INDEX);
        };
        PacketHeaderAnalyze.isCompress = function (a) {
            return this.getBit(a[0], this.BIT_IS_COMPRESS_INDEX);
        };
        PacketHeaderAnalyze.getValidSize = function (a) {
            var b = 0, c = 0;
            if (this.isBigSize(a)) {
                if (length < this.BIG_HEADER_SIZE)
                    return -1;
                b = this.getIntAt(a, this.BYTE_PACKET_SIZE_INDEX);
                c = this.BIG_HEADER_SIZE;
            }
            else {
                if (length < this.NORMAL_HEADER_SIZE)
                    return -1;
                b = this.getUnsignedShortAt(a, this.BYTE_PACKET_SIZE_INDEX);
                c = this.NORMAL_HEADER_SIZE;
            }
            return b + c;
        };
        PacketHeaderAnalyze.getBit = function (a, b) {
            return 0 != (a & 1 << b);
        };
        PacketHeaderAnalyze.genHeader = function (a, b) {
            var c;
            c = this.setBit(0, 7, !0);
            c = this.setBit(c, 6, !1);
            c = this.setBit(c, 5, b);
            c = this.setBit(c, 4, !0);
            return c = this.setBit(c, 3, a);
        };
        PacketHeaderAnalyze.setBit = function (a, b, c) {
            return c ? a | 1 << b : a & ~(1 << b);
        };
        PacketHeaderAnalyze.getIntAt = function (a, b) {
            return ((a[b] & 255) << 24) + ((a[b + 1] & 255) << 16) + ((a[b + 2] & 255) << 8) + ((a[b + 3] & 255) << 0);
        };
        PacketHeaderAnalyze.getUnsignedShortAt = function (a, b) {
            return ((a[b] & 255) << 8) + ((a[b + 1] & 255) << 0);
        };
        PacketHeaderAnalyze.getShortAt = function (a, b) {
            return (a[b] << 8) + (a[b + 1] & 255);
        };
        PacketHeaderAnalyze.BIT_IS_BINARY_INDEX = 7;
        PacketHeaderAnalyze.BIT_IS_ENCRYPT_INDEX = 6;
        PacketHeaderAnalyze.BIT_IS_COMPRESS_INDEX = 5;
        PacketHeaderAnalyze.BIT_IS_BLUE_BOXED_INDEX = 4;
        PacketHeaderAnalyze.BIT_IS_BIG_SIZE_INDEX = 3;
        PacketHeaderAnalyze.BYTE_PACKET_SIZE_INDEX = 1;
        PacketHeaderAnalyze.BIG_HEADER_SIZE = 5;
        PacketHeaderAnalyze.NORMAL_HEADER_SIZE = 3;
        return PacketHeaderAnalyze;
    }());
    Network.PacketHeaderAnalyze = PacketHeaderAnalyze;
})(Network || (Network = {}));
exports.default = Network.PacketHeaderAnalyze;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcTG9iYnlcXExvYmJ5U2NyaXB0XFxTY3JpcHRcXG5ldHdvcmtzXFxQYWNrZXRIZWFkZXJBbmFseXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBVSxPQUFPLENBOERoQjtBQTlERCxXQUFVLE9BQU87SUFDYjtRQUFBO1FBNERBLENBQUM7UUFsRFUsK0JBQVcsR0FBbEIsVUFBbUIsQ0FBQztZQUNoQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3ZJLENBQUM7UUFDTSxvQ0FBZ0IsR0FBdkIsVUFBd0IsQ0FBQztZQUNyQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLENBQUM7UUFDTSw2QkFBUyxHQUFoQixVQUFpQixDQUFDO1lBQ2QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBQ00sOEJBQVUsR0FBakIsVUFBa0IsQ0FBQztZQUNmLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDekQsQ0FBQztRQUNNLGdDQUFZLEdBQW5CLFVBQW9CLENBQUM7WUFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUNMLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDVixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ25CLElBQUksTUFBTSxHQUFH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QUFHLENBQUMsQ0FBQztRQUMxQyxDQUFDO1FBMURNLHVDQUFtQixHQUFHLENBQUMsQ0FBQztRQUN4Qix3Q0FBb0IsR0FBRyxDQUFDLENBQUM7UUFDekIseUNBQXFCLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLDJDQUF1QixHQUFHLENBQUMsQ0FBQztRQUM1Qix5Q0FBcUIsR0FBRyxDQUFDLENBQUM7UUFDMUIsMENBQXNCLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLG1DQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLHNDQUFrQixHQUFHLENBQUMsQ0FBQztRQW9EbEMsMEJBQUM7S0E1REQsQUE0REMsSUFBQTtJQTVEWSwyQkFBbUIsc0JBNEQvQixDQUFBO0FBQ0wsQ0FBQyxFQTlEUyxPQUFPLEtBQVAsT0FBTyxRQThEaEI7QUFDRCxrQkFBZSxPQUFPLENBQUMsbUJBQW1CLENBQUMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJuYW1lc3BhY2UgTmV0d29yayB7XG4gICAgZXhwb3J0IGNsYXNzIFBhY2tldEhlYWRlckFuYWx5emUge1xuICAgICAgICBzdGF0aWMgQklUX0lTX0JJTkFSWV9JTkRFWCA9IDc7XG4gICAgICAgIHN0YXRpYyBCSVRfSVNfRU5DUllQVF9JTkRFWCA9IDY7XG4gICAgICAgIHN0YXRpYyBCSVRfSVNfQ09NUFJFU1NfSU5ERVggPSA1O1xuICAgICAgICBzdGF0aWMgQklUX0lTX0JMVUVfQk9YRURfSU5ERVggPSA0O1xuICAgICAgICBzdGF0aWMgQklUX0lTX0JJR19TSVpFX0lOREVYID0gMztcbiAgICAgICAgc3RhdGljIEJZVEVfUEFDS0VUX1NJWkVfSU5ERVggPSAxO1xuICAgICAgICBzdGF0aWMgQklHX0hFQURFUl9TSVpFID0gNTtcbiAgICAgICAgc3RhdGljIE5PUk1BTF9IRUFERVJfU0laRSA9IDM7XG5cbiAgICAgICAgc3RhdGljIGdldERhdGFTaXplKGEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzQmlnU2l6ZShhKSA/IHRoaXMuZ2V0SW50QXQoYSwgdGhpcy5CWVRFX1BBQ0tFVF9TSVpFX0lOREVYKSA6IHRoaXMuZ2V0VW5zaWduZWRTaG9ydEF0KGEsIHRoaXMuQllURV9QQUNLRVRfU0laRV9JTkRFWCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljIGdldENtZElkRnJvbURhdGEoYSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2hvcnRBdChhLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0aWMgaXNCaWdTaXplKGEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEJpdChhWzBdLCB0aGlzLkJJVF9JU19CSUdfU0laRV9JTkRFWCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljIGlzQ29tcHJlc3MoYSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Qml0KGFbMF0sIHRoaXMuQklUX0lTX0NPTVBSRVNTX0lOREVYKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0aWMgZ2V0VmFsaWRTaXplKGEpIHtcbiAgICAgICAgICAgIHZhciBiID0gMCxcbiAgICAgICAgICAgICAgICBjID0gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQmlnU2l6ZShhKSkge1xuICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPCB0aGlzLkJJR19IRUFERVJfU0laRSkgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIGIgPSB0aGlzLmdldEludEF0KGEsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQllURV9QQUNLRVRfU0laRV9JTkRFWCk7XG4gICAgICAgICAgICAgICAgYyA9IHRoaXMuQklHX0hFQURFUl9TSVpFXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPCB0aGlzLk5PUk1BTF9IRUFERVJfU0laRSkgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIGIgPSB0aGlzLmdldFVuc2lnbmVkU2hvcnRBdChhLCB0aGlzLkJZVEVfUEFDS0VUX1NJWkVfSU5ERVgpO1xuICAgICAgICAgICAgICAgIGMgPSB0aGlzLk5PUk1BTF9IRUFERVJfU0laRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBiICsgY1xuICAgICAgICB9XG4gICAgICAgIHN0YXRpYyBnZXRCaXQoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIDAgIT0gKGEgJiAxIDw8IGIpXG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljIGdlbkhlYWRlcihhLCBiKSB7XG4gICAgICAgICAgICB2YXIgYztcbiAgICAgICAgICAgIGMgPSB0aGlzLnNldEJpdCgwLCA3LCAhMCk7XG4gICAgICAgICAgICBjID0gdGhpcy5zZXRCaXQoYywgNiwgITEpO1xuICAgICAgICAgICAgYyA9IHRoaXMuc2V0Qml0KGMsIDUsIGIpO1xuICAgICAgICAgICAgYyA9IHRoaXMuc2V0Qml0KGMsIDQsICEwKTtcbiAgICAgICAgICAgIHJldHVybiBjID0gdGhpcy5zZXRCaXQoYywgMywgYSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljIHNldEJpdChhLCBiLCBjKSB7XG4gICAgICAgICAgICByZXR1cm4gYyA/IGEgfCAxIDw8IGIgOiBhICYgfigxIDw8IGIpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRpYyBnZXRJbnRBdChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gKChhW2JdICYgMjU1KSA8PCAyNCkgKyAoKGFbYiArIDFdICYgMjU1KSA8PCAxNikgKyAoKGFbYiArIDJdICYgMjU1KSA8PCA4KSArICgoYVtiICsgM10gJiAyNTUpIDw8IDApO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRpYyBnZXRVbnNpZ25lZFNob3J0QXQoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuICgoYVtiXSAmIDI1NSkgPDwgOCkgKyAoKGFbYiArIDFdICYgMjU1KSA8PCAwKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0aWMgZ2V0U2hvcnRBdChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gKGFbYl0gPDwgOCkgKyAoYVtiICsgMV0gJiAyNTUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgTmV0d29yay5QYWNrZXRIZWFkZXJBbmFseXplOyJdfQ==