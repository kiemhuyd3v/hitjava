{"version":3,"sources":["assets\\MauBinh\\MauBinhScript\\MauBinh.DragCard.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2DAAqD;AAC/C,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAgD,sCAAY;IAA5D;QAAA,qEAsCC;QAnCG,wBAAwB;QAExB,mBAAa,GAAG,IAAI,CAAC;QACrB,WAAK,GAAG,IAAI,CAAC;QACb,UAAI,GAAG,IAAI,CAAC;;QA8BZ,iBAAiB;IACrB,CAAC;2BAtCoB,kBAAkB;IASnC,mCAAM,GAAN;QACI,oBAAkB,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvC,CAAC;IAED,kCAAK,GAAL;QACI,EAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;IACrD,CAAC;IAED,sCAAS,GAAT,UAAU,KAAK,EAAE,KAAK;QAClB,2BAA2B;QAC3B,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;IAED,oCAAO,GAAP;QACI,6CAA6C;QAC7C,4BAAiB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAChE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED,6CAAgB,GAAhB,UAAiB,KAAK,EAAE,IAAI;QACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAEtB,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnD,4BAAiB,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAClE,CAAC;;IAjCa,2BAAQ,GAAuB,IAAI,CAAC;IAFjC,kBAAkB;QADtC,OAAO;OACa,kBAAkB,CAsCtC;IAAD,yBAAC;CAtCD,AAsCC,CAtC+C,EAAE,CAAC,SAAS,GAsC3D;kBAtCoB,kBAAkB","file":"","sourceRoot":"/","sourcesContent":["import MauBinhController from \"./MauBinh.Controller\";\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class DragCardController extends cc.Component {\n\n    public static instance: DragCardController = null;\n    // LIFE-CYCLE CALLBACKS:\n\n    currentTarget = null;\n    other = null;\n    self = null;\n\n    onLoad() {\n        DragCardController.instance = this;\n    }\n\n    start() {\n        cc.director.getCollisionManager().enabled = true;\n    }\n\n    updatePos(pos_X, pos_Y) {\n        // this.node.opacity = 100;\n        this.node.opacity = 255;\n        this.node.setPosition(pos_X, pos_Y);\n    }\n\n    endMove() {\n        //  cc.log(\"endMove : \", this.currentTarget);\n        MauBinhController.instance.completeMoveCard(this.currentTarget);\n        this.node.active = false;\n    }\n\n    onCollisionEnter(other, self) {\n        this.other = other.node;\n        this.self = self.node;\n\n        this.currentTarget = parseInt(this.other.name) - 1;\n        MauBinhController.instance.showMoveTarget(this.currentTarget);\n    }\n\n    // update (dt) {}\n}\n"]}