{"version":3,"sources":["assets\\ShootFish\\ShootFishScript\\ShootFish.Fish.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qEAAgE;AAChE,yGAAoG;AACpG,mDAAoC;AAG9B,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAkC,wBAAY;IAA9C;QAAA,qEA8LC;QA3LG,UAAI,GAAY,IAAI,CAAC;QAErB,WAAK,GAAa,IAAI,CAAC;QAIhB,WAAK,GAAG,KAAK,CAAC;QACd,UAAI,GAAG,CAAC,CAAC,CAAC;QAET,aAAO,GAAgB,IAAI,CAAC;QACpC,gCAAgC;QAExB,sBAAgB,GAAG,EAAE,CAAC;QACtB,iBAAW,GAAG,CAAC,CAAC;QAChB,qBAAe,GAAG,CAAC,CAAC,CAAC;QACtB,mBAAa,GAAG,CAAC,CAAC;QAClB,mBAAa,GAAG,CAAC,CAAC;;IA2K7B,CAAC;IAzKU,sBAAO,GAAd,UAAe,QAAa;QACxB,IAAI,CAAC,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;QAEvC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;YACpD,IAAI,CAAC,GAAG,EAAE,CAAC;YACX,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;gBAC9B,uCAAuC;aAC1C;YACD,OAAO;SACV;QACD,IAAI,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC5B,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC9B,IAAI,QAAQ,GAAG,EAAE,CAAC,WAAW,CAAC,wBAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC1E,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;YAE5B,IAAI,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC;YAC5E,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAE,KAAK,GAAG,CAAC,EAAE,CAAE,MAAM,GAAG,CAAC,CAAC,CAAC;YAElD,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;SAC7B;QACD,uCAAuC;QAEvC,IAAI,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QAChC,IAAI,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QAChC,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QAClC,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QAClC,IAAI,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC5B,IAAI,IAAI,GAAG,gCAAsB,CAAC,uBAAuB,EAAE,CAAC;QAE5D,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,eAAK,CAAC,OAAO,CAAC;QAErD,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,KAAK,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;YAC1C,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC/D,QAAQ,wBAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,EAAE;gBACtC,KAAK,CAAC;oBACF,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAChE,MAAM;gBACV,KAAK,CAAC;oBACF,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACjE,MAAM;gBACV,KAAK,CAAC;oBACF,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAChE,MAAM;aACb;YACD,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC1B;QAED,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAClC,QAAQ,wBAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,EAAE;YACtC,KAAK,CAAC;gBACF,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACnC,MAAM;YACV,KAAK,CAAC;gBACF,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC;gBACpC,MAAM;YACV,KAAK,CAAC;gBACF,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC;gBACnC,MAAM;SACb;QAED,IAAI,YAAY,GAAG,IAAI,CAAC;QACxB,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;QACf,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC;QACjC,KAAK,IAAI,GAAC,GAAG,CAAC,EAAE,GAAC,GAAG,UAAU,CAAC,MAAM,EAAE,GAAC,EAAE,EAAE;YACxC,IAAI,KAAK,GAAG,UAAU,CAAC,GAAC,GAAG,CAAC,CAAC,CAAC;YAC9B,IAAI,KAAK,GAAG,UAAU,CAAC,GAAC,CAAC,CAAC;YAC1B,IAAI,EAAE,GAAY,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,EAAE,GAAY,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,EAAE,GAAW,KAAK,CAAC,GAAG,CAAC,CAAC;YAC5B,IAAI,EAAE,GAAW,KAAK,CAAC,GAAG,CAAC,CAAC;YAC5B,IAAI,IAAI,GAAG,EAAE,GAAG,CAAC,EAAE;gBACf,IAAI,KAAK,GAAG,CAAC;oBAAE,KAAK,GAAG,GAAC,CAAC;gBACzB,IAAI,QAAQ,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBAClC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,GAAG,eAAK,CAAC,OAAO,CAAC;gBAC/D,IAAI,QAAQ,GAAG,CAAC,CAAC;gBACjB,IAAI,YAAY,EAAE;oBACd,QAAQ,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;oBAC9B,YAAY,GAAG,KAAK,CAAC;iBACxB;qBAAM;oBACH,QAAQ,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;iBAC/B;gBACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,CAAC;aAChF;SACJ;QAED,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QAEvB,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;YAClC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;YACpE,IAAI,SAAS,GAAY,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;YACtE,IAAI,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACrF,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;YACvD,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;YACvD,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;SAClE;aAAM;YACH,0CAA0C;SAC7C;QACD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IAC5B,CAAC;IAEM,6BAAc,GAArB,UAAsB,EAAU;QAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,EAAE;YACjC,OAAO;SACV;QACD,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;YAClC,IAAI,IAAI,CAAC,eAAe,IAAI,CAAC,EAAE;gBAC3B,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAC7B,IAAI,CAAC,eAAe,IAAI,EAAE,CAAC;gBAC3B,IAAI,IAAI,CAAC,eAAe,GAAG,CAAC,EAAE;oBAC1B,IAAI,CAAC,WAAW,EAAE,CAAC;oBACnB,IAAI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE;wBACjD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;wBAErG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;wBAC/D,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,eAAK,CAAC,OAAO,CAAC;wBAErD,IAAI,SAAS,GAAY,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;wBACtE,IAAI,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBACvD,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;wBACvD,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;wBAEvD,oKAAoK;qBACvK;yBAAM;wBACH,wJAAwJ;qBAC3J;iBACJ;gBACD,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;gBACjC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;gBACjC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;aAC5B;SACJ;IACL,CAAC;IAEM,kBAAG,GAAV;QACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IAC7B,CAAC;IAEM,yBAAU,GAAjB;QACI,gEAAgE;QAChE,+CAA+C;QAC/C,8DAA8D;QAC9D,IAAI;QACJ,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC9E,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAEM,mBAAI,GAAX;QACI,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC;YAAE,OAAO;QACzF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QACtD,IAAI,MAAM,GAAG,EAAE,CAAC,QAAQ,CACpB,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,EAC5B,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,EACjB,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CACjC,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAClB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACxD,CAAC;IA1LD;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;sCACG;IAErB;QADC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;uCACI;IALN,IAAI;QADxB,OAAO;OACa,IAAI,CA8LxB;IAAD,WAAC;CA9LD,AA8LC,CA9LiC,EAAE,CAAC,SAAS,GA8L7C;kBA9LoB,IAAI","file":"","sourceRoot":"/","sourcesContent":["import Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\nimport ShootFishNetworkClient from \"../../Lobby/LobbyScript/Script/networks/ShootFishNetworkClient\";\nimport Play from \"./ShootFish.Play\";\n\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Fish extends cc.Component {\n\n    @property(cc.Node)\n    anim: cc.Node = null;\n    @property(cc.Label)\n    lblId: cc.Label = null;\n\n    id: number;\n\n    public isDie = false;\n    public type = -1;\n\n    private polygon: SAT.Polygon = null;\n    // private lastPolygonAngle = 0;\n\n    private dataPointsUpdate = [];\n    private currentStep = 0;\n    private currentTimeStep = -1;\n    public currentVStepX = 0;\n    public currentVStepY = 0;\n\n    public setData(fishData: any) {\n        this.id = fishData['id'];\n        this.lblId.string = this.id.toString();\n\n        if (fishData[\"h\"] <= 0 || fishData['path'].length == 0) {\n            this.die();\n            if (fishData['path'].length == 0) {\n                //  cc.log(\"fishData path length = 0\");\n            }\n            return;\n        }\n        if (this.type != fishData[\"t\"]) {\n            this.type = fishData[\"t\"];\n            this.anim.removeAllChildren();\n            let animNode = cc.instantiate(Play.instance.getFishAnimByType(this.type));\n            animNode.parent = this.anim;\n\n            let width = fishData['H'];\n            let height = fishData['w'];\n            this.polygon = new SAT.Box(new SAT.Vector(0, 0), width, height).toPolygon();\n            this.polygon.translate(- width / 2, - height / 2);\n\n            this.node.width = width;\n            this.node.height = height;\n        }\n        // //  cc.log(\"setfishdata \" + this.id)\n\n        let dX = Number(fishData['dx']);\n        let dY = Number(fishData['dy']);\n        let posX = Number(fishData['px']);\n        let posY = Number(fishData['py']);\n        let path = fishData['path'];\n        let time = ShootFishNetworkClient.serverCurrentTimeMillis();\n\n        this.node.angle = Math.atan2(dY, dX) * Utils.Rad2Deg;\n\n        let dataPoints = [];\n        for (var i = 0; i < path.length; i++) {\n            var dataP = { 't': Number(path[i]['t']) };\n            dataP['p'] = cc.v2(Number(path[i]['x']), Number(path[i]['y']));\n            switch (Play.instance.mePlayer.serverPos) {\n                case 1:\n                    dataP['p'] = cc.v2(-Number(path[i]['x']), Number(path[i]['y']));\n                    break;\n                case 2:\n                    dataP['p'] = cc.v2(-Number(path[i]['x']), -Number(path[i]['y']));\n                    break;\n                case 3:\n                    dataP['p'] = cc.v2(Number(path[i]['x']), -Number(path[i]['y']));\n                    break;\n            }\n            dataPoints.push(dataP);\n        }\n\n        this.node.setPosition(posX, posY);\n        switch (Play.instance.mePlayer.serverPos) {\n            case 1:\n                this.node.setPosition(-posX, posY);\n                break;\n            case 2:\n                this.node.setPosition(-posX, -posY);\n                break;\n            case 3:\n                this.node.setPosition(posX, -posY);\n                break;\n        }\n\n        let isFirstPoint = true;\n        let point = -1;\n        this.dataPointsUpdate.length = 0;\n        for (let i = 1; i < dataPoints.length; i++) {\n            let data1 = dataPoints[i - 1];\n            let data2 = dataPoints[i];\n            let p1: cc.Vec2 = data1['p'];\n            let p2: cc.Vec2 = data2['p'];\n            let t1: number = data1['t'];\n            let t2: number = data2['t'];\n            if (time - t2 < 0) {\n                if (point < 0) point = i;\n                let deltaPos = p2.clone().sub(p1);\n                let angle = Math.atan2(deltaPos.y, deltaPos.x) * Utils.Rad2Deg;\n                let timeMove = 0;\n                if (isFirstPoint) {\n                    timeMove = (t2 - time) / 1000;\n                    isFirstPoint = false;\n                } else {\n                    timeMove = (t2 - t1) / 1000;\n                }\n                this.dataPointsUpdate.push({ 'p': p2, 't': timeMove, 'a': angle, \"tms\": t2});\n            }\n        }\n\n        this.currentTimeStep = -1;\n        this.currentStep = 0;\n        this.currentVStepX = 0;\n        this.currentVStepY = 0;\n\n        if (this.dataPointsUpdate.length > 0) {\n            this.currentTimeStep = this.dataPointsUpdate[this.currentStep]['t'];\n            let moveToPos: cc.Vec2 = this.dataPointsUpdate[this.currentStep]['p'];\n            let deltaPos = moveToPos.sub(new cc.Vec2(this.node.position.x,this.node.position.y));\n            this.currentVStepX = deltaPos.x / this.currentTimeStep;\n            this.currentVStepY = deltaPos.y / this.currentTimeStep;\n            this.node.angle = this.dataPointsUpdate[this.currentStep]['a'];\n        } else {\n            //  cc.log(\"can't find path: \" + this.id);\n        }\n        this.isDie = false;\n        this.node.active = true;\n    }\n\n    public updateRealTime(dt: number) {\n        if (!this.node.active || this.isDie) {\n            return;\n        }\n        if (this.dataPointsUpdate.length > 0) {\n            if (this.currentTimeStep >= 0) {\n                let pos = this.node.position;\n                this.currentTimeStep -= dt;\n                if (this.currentTimeStep < 0) {\n                    this.currentStep++;\n                    if (this.currentStep < this.dataPointsUpdate.length) {\n                        this.currentTimeStep = this.dataPointsUpdate[this.currentStep]['t'] + Math.abs(this.currentTimeStep);\n\n                        this.node.angle = this.dataPointsUpdate[this.currentStep]['a'];\n                        this.polygon.angle = this.node.angle * Utils.Deg2Rad;\n\n                        let moveToPos: cc.Vec2 = this.dataPointsUpdate[this.currentStep]['p'];\n                        let deltaPos = moveToPos.sub(new cc.Vec2(pos.x,pos.y));\n                        this.currentVStepX = deltaPos.x / this.currentTimeStep;\n                        this.currentVStepY = deltaPos.y / this.currentTimeStep;\n\n                        ////  cc.log(\"fish \" + this.id + \" cstep: \" + this._currentStep + \" maxStep: \" + this._dataPointsUpdate.length + \" moveToPos: \" + moveToPos.x + \", \" + moveToPos.y);\n                    } else {\n                        ////  cc.log(\"this._current \" + this.id + \" PrepareStop _dataPointsUpdatel: \" + this._dataPointsUpdate.length + \"  _currentStep: \" + this._currentStep);\n                    }\n                }\n                pos.x += this.currentVStepX * dt;\n                pos.y += this.currentVStepY * dt;\n                this.node.position = pos;\n            }\n        }\n    }\n\n    public die() {\n        this.isDie = true;\n        this.node.active = false;\n    }\n\n    public getPolygon(): SAT.Polygon {\n        // if (Math.abs(this.lastPolygonAngle - this.node.angle) >= 3) {\n        //     this.lastPolygonAngle = this.node.angle;\n        //     this.polygon.setAngle(this.node.angle * Utils.Deg2Rad);\n        // }\n        this.polygon.pos = new SAT.Vector(this.node.position.x, this.node.position.y);\n        return this.polygon;\n    }\n\n    public hurt() {\n        if (this.anim.children.length == 0 || this.anim.children[0].children.length == 0) return;\n        this.anim.children[0].children[0].stopActionByTag(99);\n        var action = cc.sequence(\n            cc.tintTo(0.05, 255, 54, 54),\n            cc.delayTime(0.1),\n            cc.tintTo(0.05, 255, 255, 255)\n        );\n        action.setTag(99);\n        this.anim.children[0].children[0].runAction(action);\n    }\n}\n"]}